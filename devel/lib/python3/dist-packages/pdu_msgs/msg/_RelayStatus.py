# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pdu_msgs/RelayStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RelayStatus(genpy.Message):
  _md5sum = "747c0056a2372beaf7485ce2d5289570"
  _type = "pdu_msgs/RelayStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 value

uint8 OK = 0
uint8 RELAY_COIL_OPEN = 1
uint8 RELAY_COIL_SHORTED = 2
uint8 NORM_OPEN_RELAY_OPEN = 3
uint8 NORM_CLOSED_RELAY_OPEN = 4
uint8 COIL_NOT_POWERED = 5
uint8 NORM_OPEN_RELAY_SHORTED = 6
uint8 NORM_CLOSED_RELAY_SHORTED = 7
uint8 RESERVED_01 = 8
uint8 RESERVED_02 = 9
uint8 RESERVED_03 = 10
uint8 HIGH_SIDE_FAULT = 11
uint8 HIGH_SIDE_OPEN_LOAD = 12
uint8 HIGH_SIDE_OVER_VOLTAGE = 13
uint8 RESERVED_04 = 14
uint8 RELAY_LOCATION_NOT_USED = 15
"""
  # Pseudo-constants
  OK = 0
  RELAY_COIL_OPEN = 1
  RELAY_COIL_SHORTED = 2
  NORM_OPEN_RELAY_OPEN = 3
  NORM_CLOSED_RELAY_OPEN = 4
  COIL_NOT_POWERED = 5
  NORM_OPEN_RELAY_SHORTED = 6
  NORM_CLOSED_RELAY_SHORTED = 7
  RESERVED_01 = 8
  RESERVED_02 = 9
  RESERVED_03 = 10
  HIGH_SIDE_FAULT = 11
  HIGH_SIDE_OPEN_LOAD = 12
  HIGH_SIDE_OVER_VOLTAGE = 13
  RESERVED_04 = 14
  RELAY_LOCATION_NOT_USED = 15

  __slots__ = ['value']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RelayStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.value is None:
        self.value = 0
    else:
      self.value = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.value
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.value,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.value
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.value,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
