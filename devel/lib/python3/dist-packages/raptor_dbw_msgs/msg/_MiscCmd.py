# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from raptor_dbw_msgs/MiscCmd.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import raptor_dbw_msgs.msg

class MiscCmd(genpy.Message):
  _md5sum = "1267e40afe4289757af3bbfb5a1352fe"
  _type = "raptor_dbw_msgs/MiscCmd"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Turn signal command enumeration
TurnSignal cmd

DoorRequest door_request_right_rear

uint8 rolling_counter

HighBeam high_beam_cmd

WiperFront front_wiper_cmd

WiperRear rear_wiper_cmd

Ignition ignition_cmd
DoorRequest door_request_left_rear
DoorRequest door_request_lift_gate

bool block_standard_cruise_buttons
bool block_adaptive_cruise_buttons
bool block_turn_signal_stalk

bool horn_cmd

LowBeam low_beam_cmd

================================================================================
MSG: raptor_dbw_msgs/TurnSignal
uint8 value

uint8 NONE = 0
uint8 LEFT = 1
uint8 RIGHT = 2
uint8 HAZARDS = 3
uint8 SNA = 7
================================================================================
MSG: raptor_dbw_msgs/DoorRequest
uint8 value

uint8 NO_REQUEST=0
uint8 LIFTGATE_TOGGLE=1
uint8 LR_DOOR_TOGGLE=2
uint8 RR_DOOR_TOGGLE=3
================================================================================
MSG: raptor_dbw_msgs/HighBeam
uint8 status

uint8 OFF = 0
uint8 ON = 1
uint8 FORCE_ON = 2
uint8 RESERVED = 3

================================================================================
MSG: raptor_dbw_msgs/WiperFront
uint8 status

uint8 OFF = 0
uint8 INTERVAL_1 = 1
uint8 INTERVAL_2 = 2
uint8 INTERVAL_3 = 3
uint8 INTERVAL_4 = 4
uint8 INTERVAL_5 = 5
uint8 INTERVAL_6 = 6
uint8 CONSTANT_LOW = 11
uint8 CONSTANT_HIGH = 12
uint8 WASH_BRIEF = 13
uint8 WASH_CONTINUOUS = 14
uint8 SNA = 15
================================================================================
MSG: raptor_dbw_msgs/WiperRear
uint8 status

uint8 OFF = 0
uint8 INTERVAL_1 = 1
uint8 CONSTANT_LOW = 11
uint8 CONSTANT_HIGH = 12
uint8 WASH_BRIEF = 13
uint8 WASH_CONTINUOUS = 14
uint8 SNA = 15
================================================================================
MSG: raptor_dbw_msgs/Ignition
uint8 status

uint8 NO_REQUEST = 0
uint8 FORCE_OFF = 1
uint8 ACCESSORY = 2
uint8 RUN = 3
uint8 CRANK = 4
================================================================================
MSG: raptor_dbw_msgs/LowBeam
uint8 status

uint8 OFF = 0
uint8 RESERVED = 1
uint8 ON = 2
uint8 RESERVED_1 = 3
"""
  __slots__ = ['cmd','door_request_right_rear','rolling_counter','high_beam_cmd','front_wiper_cmd','rear_wiper_cmd','ignition_cmd','door_request_left_rear','door_request_lift_gate','block_standard_cruise_buttons','block_adaptive_cruise_buttons','block_turn_signal_stalk','horn_cmd','low_beam_cmd']
  _slot_types = ['raptor_dbw_msgs/TurnSignal','raptor_dbw_msgs/DoorRequest','uint8','raptor_dbw_msgs/HighBeam','raptor_dbw_msgs/WiperFront','raptor_dbw_msgs/WiperRear','raptor_dbw_msgs/Ignition','raptor_dbw_msgs/DoorRequest','raptor_dbw_msgs/DoorRequest','bool','bool','bool','bool','raptor_dbw_msgs/LowBeam']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cmd,door_request_right_rear,rolling_counter,high_beam_cmd,front_wiper_cmd,rear_wiper_cmd,ignition_cmd,door_request_left_rear,door_request_lift_gate,block_standard_cruise_buttons,block_adaptive_cruise_buttons,block_turn_signal_stalk,horn_cmd,low_beam_cmd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MiscCmd, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cmd is None:
        self.cmd = raptor_dbw_msgs.msg.TurnSignal()
      if self.door_request_right_rear is None:
        self.door_request_right_rear = raptor_dbw_msgs.msg.DoorRequest()
      if self.rolling_counter is None:
        self.rolling_counter = 0
      if self.high_beam_cmd is None:
        self.high_beam_cmd = raptor_dbw_msgs.msg.HighBeam()
      if self.front_wiper_cmd is None:
        self.front_wiper_cmd = raptor_dbw_msgs.msg.WiperFront()
      if self.rear_wiper_cmd is None:
        self.rear_wiper_cmd = raptor_dbw_msgs.msg.WiperRear()
      if self.ignition_cmd is None:
        self.ignition_cmd = raptor_dbw_msgs.msg.Ignition()
      if self.door_request_left_rear is None:
        self.door_request_left_rear = raptor_dbw_msgs.msg.DoorRequest()
      if self.door_request_lift_gate is None:
        self.door_request_lift_gate = raptor_dbw_msgs.msg.DoorRequest()
      if self.block_standard_cruise_buttons is None:
        self.block_standard_cruise_buttons = False
      if self.block_adaptive_cruise_buttons is None:
        self.block_adaptive_cruise_buttons = False
      if self.block_turn_signal_stalk is None:
        self.block_turn_signal_stalk = False
      if self.horn_cmd is None:
        self.horn_cmd = False
      if self.low_beam_cmd is None:
        self.low_beam_cmd = raptor_dbw_msgs.msg.LowBeam()
    else:
      self.cmd = raptor_dbw_msgs.msg.TurnSignal()
      self.door_request_right_rear = raptor_dbw_msgs.msg.DoorRequest()
      self.rolling_counter = 0
      self.high_beam_cmd = raptor_dbw_msgs.msg.HighBeam()
      self.front_wiper_cmd = raptor_dbw_msgs.msg.WiperFront()
      self.rear_wiper_cmd = raptor_dbw_msgs.msg.WiperRear()
      self.ignition_cmd = raptor_dbw_msgs.msg.Ignition()
      self.door_request_left_rear = raptor_dbw_msgs.msg.DoorRequest()
      self.door_request_lift_gate = raptor_dbw_msgs.msg.DoorRequest()
      self.block_standard_cruise_buttons = False
      self.block_adaptive_cruise_buttons = False
      self.block_turn_signal_stalk = False
      self.horn_cmd = False
      self.low_beam_cmd = raptor_dbw_msgs.msg.LowBeam()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_14B().pack(_x.cmd.value, _x.door_request_right_rear.value, _x.rolling_counter, _x.high_beam_cmd.status, _x.front_wiper_cmd.status, _x.rear_wiper_cmd.status, _x.ignition_cmd.status, _x.door_request_left_rear.value, _x.door_request_lift_gate.value, _x.block_standard_cruise_buttons, _x.block_adaptive_cruise_buttons, _x.block_turn_signal_stalk, _x.horn_cmd, _x.low_beam_cmd.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cmd is None:
        self.cmd = raptor_dbw_msgs.msg.TurnSignal()
      if self.door_request_right_rear is None:
        self.door_request_right_rear = raptor_dbw_msgs.msg.DoorRequest()
      if self.high_beam_cmd is None:
        self.high_beam_cmd = raptor_dbw_msgs.msg.HighBeam()
      if self.front_wiper_cmd is None:
        self.front_wiper_cmd = raptor_dbw_msgs.msg.WiperFront()
      if self.rear_wiper_cmd is None:
        self.rear_wiper_cmd = raptor_dbw_msgs.msg.WiperRear()
      if self.ignition_cmd is None:
        self.ignition_cmd = raptor_dbw_msgs.msg.Ignition()
      if self.door_request_left_rear is None:
        self.door_request_left_rear = raptor_dbw_msgs.msg.DoorRequest()
      if self.door_request_lift_gate is None:
        self.door_request_lift_gate = raptor_dbw_msgs.msg.DoorRequest()
      if self.low_beam_cmd is None:
        self.low_beam_cmd = raptor_dbw_msgs.msg.LowBeam()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.cmd.value, _x.door_request_right_rear.value, _x.rolling_counter, _x.high_beam_cmd.status, _x.front_wiper_cmd.status, _x.rear_wiper_cmd.status, _x.ignition_cmd.status, _x.door_request_left_rear.value, _x.door_request_lift_gate.value, _x.block_standard_cruise_buttons, _x.block_adaptive_cruise_buttons, _x.block_turn_signal_stalk, _x.horn_cmd, _x.low_beam_cmd.status,) = _get_struct_14B().unpack(str[start:end])
      self.block_standard_cruise_buttons = bool(self.block_standard_cruise_buttons)
      self.block_adaptive_cruise_buttons = bool(self.block_adaptive_cruise_buttons)
      self.block_turn_signal_stalk = bool(self.block_turn_signal_stalk)
      self.horn_cmd = bool(self.horn_cmd)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_14B().pack(_x.cmd.value, _x.door_request_right_rear.value, _x.rolling_counter, _x.high_beam_cmd.status, _x.front_wiper_cmd.status, _x.rear_wiper_cmd.status, _x.ignition_cmd.status, _x.door_request_left_rear.value, _x.door_request_lift_gate.value, _x.block_standard_cruise_buttons, _x.block_adaptive_cruise_buttons, _x.block_turn_signal_stalk, _x.horn_cmd, _x.low_beam_cmd.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cmd is None:
        self.cmd = raptor_dbw_msgs.msg.TurnSignal()
      if self.door_request_right_rear is None:
        self.door_request_right_rear = raptor_dbw_msgs.msg.DoorRequest()
      if self.high_beam_cmd is None:
        self.high_beam_cmd = raptor_dbw_msgs.msg.HighBeam()
      if self.front_wiper_cmd is None:
        self.front_wiper_cmd = raptor_dbw_msgs.msg.WiperFront()
      if self.rear_wiper_cmd is None:
        self.rear_wiper_cmd = raptor_dbw_msgs.msg.WiperRear()
      if self.ignition_cmd is None:
        self.ignition_cmd = raptor_dbw_msgs.msg.Ignition()
      if self.door_request_left_rear is None:
        self.door_request_left_rear = raptor_dbw_msgs.msg.DoorRequest()
      if self.door_request_lift_gate is None:
        self.door_request_lift_gate = raptor_dbw_msgs.msg.DoorRequest()
      if self.low_beam_cmd is None:
        self.low_beam_cmd = raptor_dbw_msgs.msg.LowBeam()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.cmd.value, _x.door_request_right_rear.value, _x.rolling_counter, _x.high_beam_cmd.status, _x.front_wiper_cmd.status, _x.rear_wiper_cmd.status, _x.ignition_cmd.status, _x.door_request_left_rear.value, _x.door_request_lift_gate.value, _x.block_standard_cruise_buttons, _x.block_adaptive_cruise_buttons, _x.block_turn_signal_stalk, _x.horn_cmd, _x.low_beam_cmd.status,) = _get_struct_14B().unpack(str[start:end])
      self.block_standard_cruise_buttons = bool(self.block_standard_cruise_buttons)
      self.block_adaptive_cruise_buttons = bool(self.block_adaptive_cruise_buttons)
      self.block_turn_signal_stalk = bool(self.block_turn_signal_stalk)
      self.horn_cmd = bool(self.horn_cmd)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14B = None
def _get_struct_14B():
    global _struct_14B
    if _struct_14B is None:
        _struct_14B = struct.Struct("<14B")
    return _struct_14B
