// Generated by gencpp from file pdu_msgs/FuseStatus.msg
// DO NOT EDIT!


#ifndef PDU_MSGS_MESSAGE_FUSESTATUS_H
#define PDU_MSGS_MESSAGE_FUSESTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pdu_msgs
{
template <class ContainerAllocator>
struct FuseStatus_
{
  typedef FuseStatus_<ContainerAllocator> Type;

  FuseStatus_()
    : value(0)  {
    }
  FuseStatus_(const ContainerAllocator& _alloc)
    : value(0)  {
  (void)_alloc;
    }



   typedef uint8_t _value_type;
  _value_type value;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NO_FAULT)
  #undef NO_FAULT
#endif
#if defined(_WIN32) && defined(BLOWN)
  #undef BLOWN
#endif
#if defined(_WIN32) && defined(NOT_POWERED)
  #undef NOT_POWERED
#endif
#if defined(_WIN32) && defined(NOT_USED)
  #undef NOT_USED
#endif

  enum {
    NO_FAULT = 0u,
    BLOWN = 1u,
    NOT_POWERED = 2u,
    NOT_USED = 3u,
  };


  typedef boost::shared_ptr< ::pdu_msgs::FuseStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pdu_msgs::FuseStatus_<ContainerAllocator> const> ConstPtr;

}; // struct FuseStatus_

typedef ::pdu_msgs::FuseStatus_<std::allocator<void> > FuseStatus;

typedef boost::shared_ptr< ::pdu_msgs::FuseStatus > FuseStatusPtr;
typedef boost::shared_ptr< ::pdu_msgs::FuseStatus const> FuseStatusConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pdu_msgs::FuseStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pdu_msgs::FuseStatus_<ContainerAllocator1> & lhs, const ::pdu_msgs::FuseStatus_<ContainerAllocator2> & rhs)
{
  return lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pdu_msgs::FuseStatus_<ContainerAllocator1> & lhs, const ::pdu_msgs::FuseStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pdu_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pdu_msgs::FuseStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pdu_msgs::FuseStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pdu_msgs::FuseStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pdu_msgs::FuseStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pdu_msgs::FuseStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pdu_msgs::FuseStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pdu_msgs::FuseStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "04b2eb2c07f677f2fee7409032421fc8";
  }

  static const char* value(const ::pdu_msgs::FuseStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x04b2eb2c07f677f2ULL;
  static const uint64_t static_value2 = 0xfee7409032421fc8ULL;
};

template<class ContainerAllocator>
struct DataType< ::pdu_msgs::FuseStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pdu_msgs/FuseStatus";
  }

  static const char* value(const ::pdu_msgs::FuseStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pdu_msgs::FuseStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 value\n"
"\n"
"uint8 NO_FAULT = 0\n"
"uint8 BLOWN = 1\n"
"uint8 NOT_POWERED = 2\n"
"uint8 NOT_USED = 3\n"
;
  }

  static const char* value(const ::pdu_msgs::FuseStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FuseStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pdu_msgs::FuseStatus_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PDU_MSGS_MESSAGE_FUSESTATUS_H
