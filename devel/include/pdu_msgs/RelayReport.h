// Generated by gencpp from file pdu_msgs/RelayReport.msg
// DO NOT EDIT!


#ifndef PDU_MSGS_MESSAGE_RELAYREPORT_H
#define PDU_MSGS_MESSAGE_RELAYREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <pdu_msgs/RelayStatus.h>
#include <pdu_msgs/RelayStatus.h>
#include <pdu_msgs/RelayStatus.h>
#include <pdu_msgs/RelayStatus.h>
#include <pdu_msgs/RelayStatus.h>
#include <pdu_msgs/RelayStatus.h>
#include <pdu_msgs/RelayStatus.h>
#include <pdu_msgs/RelayStatus.h>

namespace pdu_msgs
{
template <class ContainerAllocator>
struct RelayReport_
{
  typedef RelayReport_<ContainerAllocator> Type;

  RelayReport_()
    : header()
    , GridAddress(0)
    , relay_1()
    , relay_2()
    , relay_3()
    , relay_4()
    , relay_5()
    , relay_6()
    , relay_7()
    , relay_8()  {
    }
  RelayReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , GridAddress(0)
    , relay_1(_alloc)
    , relay_2(_alloc)
    , relay_3(_alloc)
    , relay_4(_alloc)
    , relay_5(_alloc)
    , relay_6(_alloc)
    , relay_7(_alloc)
    , relay_8(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _GridAddress_type;
  _GridAddress_type GridAddress;

   typedef  ::pdu_msgs::RelayStatus_<ContainerAllocator>  _relay_1_type;
  _relay_1_type relay_1;

   typedef  ::pdu_msgs::RelayStatus_<ContainerAllocator>  _relay_2_type;
  _relay_2_type relay_2;

   typedef  ::pdu_msgs::RelayStatus_<ContainerAllocator>  _relay_3_type;
  _relay_3_type relay_3;

   typedef  ::pdu_msgs::RelayStatus_<ContainerAllocator>  _relay_4_type;
  _relay_4_type relay_4;

   typedef  ::pdu_msgs::RelayStatus_<ContainerAllocator>  _relay_5_type;
  _relay_5_type relay_5;

   typedef  ::pdu_msgs::RelayStatus_<ContainerAllocator>  _relay_6_type;
  _relay_6_type relay_6;

   typedef  ::pdu_msgs::RelayStatus_<ContainerAllocator>  _relay_7_type;
  _relay_7_type relay_7;

   typedef  ::pdu_msgs::RelayStatus_<ContainerAllocator>  _relay_8_type;
  _relay_8_type relay_8;





  typedef boost::shared_ptr< ::pdu_msgs::RelayReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pdu_msgs::RelayReport_<ContainerAllocator> const> ConstPtr;

}; // struct RelayReport_

typedef ::pdu_msgs::RelayReport_<std::allocator<void> > RelayReport;

typedef boost::shared_ptr< ::pdu_msgs::RelayReport > RelayReportPtr;
typedef boost::shared_ptr< ::pdu_msgs::RelayReport const> RelayReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pdu_msgs::RelayReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pdu_msgs::RelayReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pdu_msgs::RelayReport_<ContainerAllocator1> & lhs, const ::pdu_msgs::RelayReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.GridAddress == rhs.GridAddress &&
    lhs.relay_1 == rhs.relay_1 &&
    lhs.relay_2 == rhs.relay_2 &&
    lhs.relay_3 == rhs.relay_3 &&
    lhs.relay_4 == rhs.relay_4 &&
    lhs.relay_5 == rhs.relay_5 &&
    lhs.relay_6 == rhs.relay_6 &&
    lhs.relay_7 == rhs.relay_7 &&
    lhs.relay_8 == rhs.relay_8;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pdu_msgs::RelayReport_<ContainerAllocator1> & lhs, const ::pdu_msgs::RelayReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pdu_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pdu_msgs::RelayReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pdu_msgs::RelayReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pdu_msgs::RelayReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pdu_msgs::RelayReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pdu_msgs::RelayReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pdu_msgs::RelayReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pdu_msgs::RelayReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5013cdfb5b7f5657dbdcb6339106d711";
  }

  static const char* value(const ::pdu_msgs::RelayReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5013cdfb5b7f5657ULL;
  static const uint64_t static_value2 = 0xdbdcb6339106d711ULL;
};

template<class ContainerAllocator>
struct DataType< ::pdu_msgs::RelayReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pdu_msgs/RelayReport";
  }

  static const char* value(const ::pdu_msgs::RelayReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pdu_msgs::RelayReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# Fuse status enumeration\n"
"uint8 GridAddress\n"
"\n"
"RelayStatus relay_1\n"
"RelayStatus relay_2\n"
"RelayStatus relay_3\n"
"RelayStatus relay_4\n"
"RelayStatus relay_5\n"
"RelayStatus relay_6\n"
"RelayStatus relay_7\n"
"RelayStatus relay_8\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: pdu_msgs/RelayStatus\n"
"uint8 value\n"
"\n"
"uint8 OK = 0\n"
"uint8 RELAY_COIL_OPEN = 1\n"
"uint8 RELAY_COIL_SHORTED = 2\n"
"uint8 NORM_OPEN_RELAY_OPEN = 3\n"
"uint8 NORM_CLOSED_RELAY_OPEN = 4\n"
"uint8 COIL_NOT_POWERED = 5\n"
"uint8 NORM_OPEN_RELAY_SHORTED = 6\n"
"uint8 NORM_CLOSED_RELAY_SHORTED = 7\n"
"uint8 RESERVED_01 = 8\n"
"uint8 RESERVED_02 = 9\n"
"uint8 RESERVED_03 = 10\n"
"uint8 HIGH_SIDE_FAULT = 11\n"
"uint8 HIGH_SIDE_OPEN_LOAD = 12\n"
"uint8 HIGH_SIDE_OVER_VOLTAGE = 13\n"
"uint8 RESERVED_04 = 14\n"
"uint8 RELAY_LOCATION_NOT_USED = 15\n"
;
  }

  static const char* value(const ::pdu_msgs::RelayReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pdu_msgs::RelayReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.GridAddress);
      stream.next(m.relay_1);
      stream.next(m.relay_2);
      stream.next(m.relay_3);
      stream.next(m.relay_4);
      stream.next(m.relay_5);
      stream.next(m.relay_6);
      stream.next(m.relay_7);
      stream.next(m.relay_8);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RelayReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pdu_msgs::RelayReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pdu_msgs::RelayReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "GridAddress: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GridAddress);
    s << indent << "relay_1: ";
    s << std::endl;
    Printer< ::pdu_msgs::RelayStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.relay_1);
    s << indent << "relay_2: ";
    s << std::endl;
    Printer< ::pdu_msgs::RelayStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.relay_2);
    s << indent << "relay_3: ";
    s << std::endl;
    Printer< ::pdu_msgs::RelayStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.relay_3);
    s << indent << "relay_4: ";
    s << std::endl;
    Printer< ::pdu_msgs::RelayStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.relay_4);
    s << indent << "relay_5: ";
    s << std::endl;
    Printer< ::pdu_msgs::RelayStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.relay_5);
    s << indent << "relay_6: ";
    s << std::endl;
    Printer< ::pdu_msgs::RelayStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.relay_6);
    s << indent << "relay_7: ";
    s << std::endl;
    Printer< ::pdu_msgs::RelayStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.relay_7);
    s << indent << "relay_8: ";
    s << std::endl;
    Printer< ::pdu_msgs::RelayStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.relay_8);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PDU_MSGS_MESSAGE_RELAYREPORT_H
