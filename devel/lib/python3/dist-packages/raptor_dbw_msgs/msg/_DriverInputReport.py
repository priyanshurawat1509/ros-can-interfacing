# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from raptor_dbw_msgs/DriverInputReport.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import raptor_dbw_msgs.msg
import std_msgs.msg

class DriverInputReport(genpy.Message):
  _md5sum = "39b09090e1c37c932f4f9021bb96dc32"
  _type = "raptor_dbw_msgs/DriverInputReport"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

# Turn Signal enumeration
TurnSignal turn_signal

# High beams
HighBeam high_beam_headlights

# Front Windshield Wipers enumeration
WiperFront wiper

# Buttons
bool cruise_resume_button
bool cruise_cancel_button
bool cruise_accel_button
bool cruise_decel_button
bool cruise_on_off_button
bool adaptive_cruise_on_off_button
bool adaptive_cruise_increase_distance_button
bool adaptive_cruise_decrease_distance_button

# Door status
bool driver_door_ajar
bool passenger_door_ajar
bool rear_left_door_ajar
bool rear_right_door_ajar
bool liftgate_ajar
bool any_seatbelt_unbuckled
bool airbag_deployed
bool door_or_hood_ajar

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: raptor_dbw_msgs/TurnSignal
uint8 value

uint8 NONE = 0
uint8 LEFT = 1
uint8 RIGHT = 2
uint8 HAZARDS = 3
uint8 SNA = 7
================================================================================
MSG: raptor_dbw_msgs/HighBeam
uint8 status

uint8 OFF = 0
uint8 ON = 1
uint8 FORCE_ON = 2
uint8 RESERVED = 3

================================================================================
MSG: raptor_dbw_msgs/WiperFront
uint8 status

uint8 OFF = 0
uint8 INTERVAL_1 = 1
uint8 INTERVAL_2 = 2
uint8 INTERVAL_3 = 3
uint8 INTERVAL_4 = 4
uint8 INTERVAL_5 = 5
uint8 INTERVAL_6 = 6
uint8 CONSTANT_LOW = 11
uint8 CONSTANT_HIGH = 12
uint8 WASH_BRIEF = 13
uint8 WASH_CONTINUOUS = 14
uint8 SNA = 15"""
  __slots__ = ['header','turn_signal','high_beam_headlights','wiper','cruise_resume_button','cruise_cancel_button','cruise_accel_button','cruise_decel_button','cruise_on_off_button','adaptive_cruise_on_off_button','adaptive_cruise_increase_distance_button','adaptive_cruise_decrease_distance_button','driver_door_ajar','passenger_door_ajar','rear_left_door_ajar','rear_right_door_ajar','liftgate_ajar','any_seatbelt_unbuckled','airbag_deployed','door_or_hood_ajar']
  _slot_types = ['std_msgs/Header','raptor_dbw_msgs/TurnSignal','raptor_dbw_msgs/HighBeam','raptor_dbw_msgs/WiperFront','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,turn_signal,high_beam_headlights,wiper,cruise_resume_button,cruise_cancel_button,cruise_accel_button,cruise_decel_button,cruise_on_off_button,adaptive_cruise_on_off_button,adaptive_cruise_increase_distance_button,adaptive_cruise_decrease_distance_button,driver_door_ajar,passenger_door_ajar,rear_left_door_ajar,rear_right_door_ajar,liftgate_ajar,any_seatbelt_unbuckled,airbag_deployed,door_or_hood_ajar

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DriverInputReport, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.turn_signal is None:
        self.turn_signal = raptor_dbw_msgs.msg.TurnSignal()
      if self.high_beam_headlights is None:
        self.high_beam_headlights = raptor_dbw_msgs.msg.HighBeam()
      if self.wiper is None:
        self.wiper = raptor_dbw_msgs.msg.WiperFront()
      if self.cruise_resume_button is None:
        self.cruise_resume_button = False
      if self.cruise_cancel_button is None:
        self.cruise_cancel_button = False
      if self.cruise_accel_button is None:
        self.cruise_accel_button = False
      if self.cruise_decel_button is None:
        self.cruise_decel_button = False
      if self.cruise_on_off_button is None:
        self.cruise_on_off_button = False
      if self.adaptive_cruise_on_off_button is None:
        self.adaptive_cruise_on_off_button = False
      if self.adaptive_cruise_increase_distance_button is None:
        self.adaptive_cruise_increase_distance_button = False
      if self.adaptive_cruise_decrease_distance_button is None:
        self.adaptive_cruise_decrease_distance_button = False
      if self.driver_door_ajar is None:
        self.driver_door_ajar = False
      if self.passenger_door_ajar is None:
        self.passenger_door_ajar = False
      if self.rear_left_door_ajar is None:
        self.rear_left_door_ajar = False
      if self.rear_right_door_ajar is None:
        self.rear_right_door_ajar = False
      if self.liftgate_ajar is None:
        self.liftgate_ajar = False
      if self.any_seatbelt_unbuckled is None:
        self.any_seatbelt_unbuckled = False
      if self.airbag_deployed is None:
        self.airbag_deployed = False
      if self.door_or_hood_ajar is None:
        self.door_or_hood_ajar = False
    else:
      self.header = std_msgs.msg.Header()
      self.turn_signal = raptor_dbw_msgs.msg.TurnSignal()
      self.high_beam_headlights = raptor_dbw_msgs.msg.HighBeam()
      self.wiper = raptor_dbw_msgs.msg.WiperFront()
      self.cruise_resume_button = False
      self.cruise_cancel_button = False
      self.cruise_accel_button = False
      self.cruise_decel_button = False
      self.cruise_on_off_button = False
      self.adaptive_cruise_on_off_button = False
      self.adaptive_cruise_increase_distance_button = False
      self.adaptive_cruise_decrease_distance_button = False
      self.driver_door_ajar = False
      self.passenger_door_ajar = False
      self.rear_left_door_ajar = False
      self.rear_right_door_ajar = False
      self.liftgate_ajar = False
      self.any_seatbelt_unbuckled = False
      self.airbag_deployed = False
      self.door_or_hood_ajar = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_19B().pack(_x.turn_signal.value, _x.high_beam_headlights.status, _x.wiper.status, _x.cruise_resume_button, _x.cruise_cancel_button, _x.cruise_accel_button, _x.cruise_decel_button, _x.cruise_on_off_button, _x.adaptive_cruise_on_off_button, _x.adaptive_cruise_increase_distance_button, _x.adaptive_cruise_decrease_distance_button, _x.driver_door_ajar, _x.passenger_door_ajar, _x.rear_left_door_ajar, _x.rear_right_door_ajar, _x.liftgate_ajar, _x.any_seatbelt_unbuckled, _x.airbag_deployed, _x.door_or_hood_ajar))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.turn_signal is None:
        self.turn_signal = raptor_dbw_msgs.msg.TurnSignal()
      if self.high_beam_headlights is None:
        self.high_beam_headlights = raptor_dbw_msgs.msg.HighBeam()
      if self.wiper is None:
        self.wiper = raptor_dbw_msgs.msg.WiperFront()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.turn_signal.value, _x.high_beam_headlights.status, _x.wiper.status, _x.cruise_resume_button, _x.cruise_cancel_button, _x.cruise_accel_button, _x.cruise_decel_button, _x.cruise_on_off_button, _x.adaptive_cruise_on_off_button, _x.adaptive_cruise_increase_distance_button, _x.adaptive_cruise_decrease_distance_button, _x.driver_door_ajar, _x.passenger_door_ajar, _x.rear_left_door_ajar, _x.rear_right_door_ajar, _x.liftgate_ajar, _x.any_seatbelt_unbuckled, _x.airbag_deployed, _x.door_or_hood_ajar,) = _get_struct_19B().unpack(str[start:end])
      self.cruise_resume_button = bool(self.cruise_resume_button)
      self.cruise_cancel_button = bool(self.cruise_cancel_button)
      self.cruise_accel_button = bool(self.cruise_accel_button)
      self.cruise_decel_button = bool(self.cruise_decel_button)
      self.cruise_on_off_button = bool(self.cruise_on_off_button)
      self.adaptive_cruise_on_off_button = bool(self.adaptive_cruise_on_off_button)
      self.adaptive_cruise_increase_distance_button = bool(self.adaptive_cruise_increase_distance_button)
      self.adaptive_cruise_decrease_distance_button = bool(self.adaptive_cruise_decrease_distance_button)
      self.driver_door_ajar = bool(self.driver_door_ajar)
      self.passenger_door_ajar = bool(self.passenger_door_ajar)
      self.rear_left_door_ajar = bool(self.rear_left_door_ajar)
      self.rear_right_door_ajar = bool(self.rear_right_door_ajar)
      self.liftgate_ajar = bool(self.liftgate_ajar)
      self.any_seatbelt_unbuckled = bool(self.any_seatbelt_unbuckled)
      self.airbag_deployed = bool(self.airbag_deployed)
      self.door_or_hood_ajar = bool(self.door_or_hood_ajar)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_19B().pack(_x.turn_signal.value, _x.high_beam_headlights.status, _x.wiper.status, _x.cruise_resume_button, _x.cruise_cancel_button, _x.cruise_accel_button, _x.cruise_decel_button, _x.cruise_on_off_button, _x.adaptive_cruise_on_off_button, _x.adaptive_cruise_increase_distance_button, _x.adaptive_cruise_decrease_distance_button, _x.driver_door_ajar, _x.passenger_door_ajar, _x.rear_left_door_ajar, _x.rear_right_door_ajar, _x.liftgate_ajar, _x.any_seatbelt_unbuckled, _x.airbag_deployed, _x.door_or_hood_ajar))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.turn_signal is None:
        self.turn_signal = raptor_dbw_msgs.msg.TurnSignal()
      if self.high_beam_headlights is None:
        self.high_beam_headlights = raptor_dbw_msgs.msg.HighBeam()
      if self.wiper is None:
        self.wiper = raptor_dbw_msgs.msg.WiperFront()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.turn_signal.value, _x.high_beam_headlights.status, _x.wiper.status, _x.cruise_resume_button, _x.cruise_cancel_button, _x.cruise_accel_button, _x.cruise_decel_button, _x.cruise_on_off_button, _x.adaptive_cruise_on_off_button, _x.adaptive_cruise_increase_distance_button, _x.adaptive_cruise_decrease_distance_button, _x.driver_door_ajar, _x.passenger_door_ajar, _x.rear_left_door_ajar, _x.rear_right_door_ajar, _x.liftgate_ajar, _x.any_seatbelt_unbuckled, _x.airbag_deployed, _x.door_or_hood_ajar,) = _get_struct_19B().unpack(str[start:end])
      self.cruise_resume_button = bool(self.cruise_resume_button)
      self.cruise_cancel_button = bool(self.cruise_cancel_button)
      self.cruise_accel_button = bool(self.cruise_accel_button)
      self.cruise_decel_button = bool(self.cruise_decel_button)
      self.cruise_on_off_button = bool(self.cruise_on_off_button)
      self.adaptive_cruise_on_off_button = bool(self.adaptive_cruise_on_off_button)
      self.adaptive_cruise_increase_distance_button = bool(self.adaptive_cruise_increase_distance_button)
      self.adaptive_cruise_decrease_distance_button = bool(self.adaptive_cruise_decrease_distance_button)
      self.driver_door_ajar = bool(self.driver_door_ajar)
      self.passenger_door_ajar = bool(self.passenger_door_ajar)
      self.rear_left_door_ajar = bool(self.rear_left_door_ajar)
      self.rear_right_door_ajar = bool(self.rear_right_door_ajar)
      self.liftgate_ajar = bool(self.liftgate_ajar)
      self.any_seatbelt_unbuckled = bool(self.any_seatbelt_unbuckled)
      self.airbag_deployed = bool(self.airbag_deployed)
      self.door_or_hood_ajar = bool(self.door_or_hood_ajar)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_19B = None
def _get_struct_19B():
    global _struct_19B
    if _struct_19B is None:
        _struct_19B = struct.Struct("<19B")
    return _struct_19B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
