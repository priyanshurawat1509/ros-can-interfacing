// Generated by gencpp from file raptor_dbw_msgs/MiscReport.msg
// DO NOT EDIT!


#ifndef RAPTOR_DBW_MSGS_MESSAGE_MISCREPORT_H
#define RAPTOR_DBW_MSGS_MESSAGE_MISCREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace raptor_dbw_msgs
{
template <class ContainerAllocator>
struct MiscReport_
{
  typedef MiscReport_<ContainerAllocator> Type;

  MiscReport_()
    : header()
    , fuel_level(0.0)
    , drive_by_wire_enabled(false)
    , vehicle_speed(0.0)
    , software_build_number(0)
    , general_actuator_fault(false)
    , by_wire_ready(false)
    , general_driver_activity(false)
    , comms_fault(false)
    , ambient_temp(0.0)  {
    }
  MiscReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , fuel_level(0.0)
    , drive_by_wire_enabled(false)
    , vehicle_speed(0.0)
    , software_build_number(0)
    , general_actuator_fault(false)
    , by_wire_ready(false)
    , general_driver_activity(false)
    , comms_fault(false)
    , ambient_temp(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _fuel_level_type;
  _fuel_level_type fuel_level;

   typedef uint8_t _drive_by_wire_enabled_type;
  _drive_by_wire_enabled_type drive_by_wire_enabled;

   typedef float _vehicle_speed_type;
  _vehicle_speed_type vehicle_speed;

   typedef uint16_t _software_build_number_type;
  _software_build_number_type software_build_number;

   typedef uint8_t _general_actuator_fault_type;
  _general_actuator_fault_type general_actuator_fault;

   typedef uint8_t _by_wire_ready_type;
  _by_wire_ready_type by_wire_ready;

   typedef uint8_t _general_driver_activity_type;
  _general_driver_activity_type general_driver_activity;

   typedef uint8_t _comms_fault_type;
  _comms_fault_type comms_fault;

   typedef float _ambient_temp_type;
  _ambient_temp_type ambient_temp;





  typedef boost::shared_ptr< ::raptor_dbw_msgs::MiscReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor_dbw_msgs::MiscReport_<ContainerAllocator> const> ConstPtr;

}; // struct MiscReport_

typedef ::raptor_dbw_msgs::MiscReport_<std::allocator<void> > MiscReport;

typedef boost::shared_ptr< ::raptor_dbw_msgs::MiscReport > MiscReportPtr;
typedef boost::shared_ptr< ::raptor_dbw_msgs::MiscReport const> MiscReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raptor_dbw_msgs::MiscReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raptor_dbw_msgs::MiscReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::raptor_dbw_msgs::MiscReport_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::MiscReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.fuel_level == rhs.fuel_level &&
    lhs.drive_by_wire_enabled == rhs.drive_by_wire_enabled &&
    lhs.vehicle_speed == rhs.vehicle_speed &&
    lhs.software_build_number == rhs.software_build_number &&
    lhs.general_actuator_fault == rhs.general_actuator_fault &&
    lhs.by_wire_ready == rhs.by_wire_ready &&
    lhs.general_driver_activity == rhs.general_driver_activity &&
    lhs.comms_fault == rhs.comms_fault &&
    lhs.ambient_temp == rhs.ambient_temp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::raptor_dbw_msgs::MiscReport_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::MiscReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace raptor_dbw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::MiscReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::MiscReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::MiscReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::MiscReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::MiscReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::MiscReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raptor_dbw_msgs::MiscReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f121c2cad2d402df05aa09b1e1117c0";
  }

  static const char* value(const ::raptor_dbw_msgs::MiscReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f121c2cad2d402dULL;
  static const uint64_t static_value2 = 0xf05aa09b1e1117c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor_dbw_msgs::MiscReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raptor_dbw_msgs/MiscReport";
  }

  static const char* value(const ::raptor_dbw_msgs::MiscReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raptor_dbw_msgs::MiscReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float32 fuel_level          # %\n"
"bool drive_by_wire_enabled\n"
"float32 vehicle_speed       # km/h\n"
"uint16 software_build_number\n"
"bool general_actuator_fault\n"
"bool by_wire_ready\n"
"bool general_driver_activity\n"
"bool comms_fault\n"
"float32 ambient_temp # degrees-C\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::raptor_dbw_msgs::MiscReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raptor_dbw_msgs::MiscReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.fuel_level);
      stream.next(m.drive_by_wire_enabled);
      stream.next(m.vehicle_speed);
      stream.next(m.software_build_number);
      stream.next(m.general_actuator_fault);
      stream.next(m.by_wire_ready);
      stream.next(m.general_driver_activity);
      stream.next(m.comms_fault);
      stream.next(m.ambient_temp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MiscReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raptor_dbw_msgs::MiscReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raptor_dbw_msgs::MiscReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "fuel_level: ";
    Printer<float>::stream(s, indent + "  ", v.fuel_level);
    s << indent << "drive_by_wire_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drive_by_wire_enabled);
    s << indent << "vehicle_speed: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_speed);
    s << indent << "software_build_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.software_build_number);
    s << indent << "general_actuator_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.general_actuator_fault);
    s << indent << "by_wire_ready: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.by_wire_ready);
    s << indent << "general_driver_activity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.general_driver_activity);
    s << indent << "comms_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.comms_fault);
    s << indent << "ambient_temp: ";
    Printer<float>::stream(s, indent + "  ", v.ambient_temp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAPTOR_DBW_MSGS_MESSAGE_MISCREPORT_H
