// Generated by gencpp from file raptor_dbw_msgs/TurnSignal.msg
// DO NOT EDIT!


#ifndef RAPTOR_DBW_MSGS_MESSAGE_TURNSIGNAL_H
#define RAPTOR_DBW_MSGS_MESSAGE_TURNSIGNAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace raptor_dbw_msgs
{
template <class ContainerAllocator>
struct TurnSignal_
{
  typedef TurnSignal_<ContainerAllocator> Type;

  TurnSignal_()
    : value(0)  {
    }
  TurnSignal_(const ContainerAllocator& _alloc)
    : value(0)  {
  (void)_alloc;
    }



   typedef uint8_t _value_type;
  _value_type value;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(LEFT)
  #undef LEFT
#endif
#if defined(_WIN32) && defined(RIGHT)
  #undef RIGHT
#endif
#if defined(_WIN32) && defined(HAZARDS)
  #undef HAZARDS
#endif
#if defined(_WIN32) && defined(SNA)
  #undef SNA
#endif

  enum {
    NONE = 0u,
    LEFT = 1u,
    RIGHT = 2u,
    HAZARDS = 3u,
    SNA = 7u,
  };


  typedef boost::shared_ptr< ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator> const> ConstPtr;

}; // struct TurnSignal_

typedef ::raptor_dbw_msgs::TurnSignal_<std::allocator<void> > TurnSignal;

typedef boost::shared_ptr< ::raptor_dbw_msgs::TurnSignal > TurnSignalPtr;
typedef boost::shared_ptr< ::raptor_dbw_msgs::TurnSignal const> TurnSignalConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator2> & rhs)
{
  return lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace raptor_dbw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "933b11bd0b0ae8b539bf6f942bfb3693";
  }

  static const char* value(const ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x933b11bd0b0ae8b5ULL;
  static const uint64_t static_value2 = 0x39bf6f942bfb3693ULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raptor_dbw_msgs/TurnSignal";
  }

  static const char* value(const ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 value\n"
"\n"
"uint8 NONE = 0\n"
"uint8 LEFT = 1\n"
"uint8 RIGHT = 2\n"
"uint8 HAZARDS = 3\n"
"uint8 SNA = 7\n"
;
  }

  static const char* value(const ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TurnSignal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAPTOR_DBW_MSGS_MESSAGE_TURNSIGNAL_H
