// Generated by gencpp from file pdu_msgs/FuseReport.msg
// DO NOT EDIT!


#ifndef PDU_MSGS_MESSAGE_FUSEREPORT_H
#define PDU_MSGS_MESSAGE_FUSEREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <pdu_msgs/FuseStatus.h>
#include <pdu_msgs/FuseStatus.h>
#include <pdu_msgs/FuseStatus.h>
#include <pdu_msgs/FuseStatus.h>
#include <pdu_msgs/FuseStatus.h>
#include <pdu_msgs/FuseStatus.h>
#include <pdu_msgs/FuseStatus.h>
#include <pdu_msgs/FuseStatus.h>
#include <pdu_msgs/FuseStatus.h>
#include <pdu_msgs/FuseStatus.h>
#include <pdu_msgs/FuseStatus.h>
#include <pdu_msgs/FuseStatus.h>
#include <pdu_msgs/FuseStatus.h>
#include <pdu_msgs/FuseStatus.h>
#include <pdu_msgs/FuseStatus.h>
#include <pdu_msgs/FuseStatus.h>

namespace pdu_msgs
{
template <class ContainerAllocator>
struct FuseReport_
{
  typedef FuseReport_<ContainerAllocator> Type;

  FuseReport_()
    : header()
    , GridAddress(0)
    , fuse_1()
    , fuse_2()
    , fuse_3()
    , fuse_4()
    , fuse_5()
    , fuse_6()
    , fuse_7()
    , fuse_8()
    , fuse_9()
    , fuse_10()
    , fuse_11()
    , fuse_12()
    , fuse_13()
    , fuse_14()
    , fuse_15()
    , fuse_16()  {
    }
  FuseReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , GridAddress(0)
    , fuse_1(_alloc)
    , fuse_2(_alloc)
    , fuse_3(_alloc)
    , fuse_4(_alloc)
    , fuse_5(_alloc)
    , fuse_6(_alloc)
    , fuse_7(_alloc)
    , fuse_8(_alloc)
    , fuse_9(_alloc)
    , fuse_10(_alloc)
    , fuse_11(_alloc)
    , fuse_12(_alloc)
    , fuse_13(_alloc)
    , fuse_14(_alloc)
    , fuse_15(_alloc)
    , fuse_16(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _GridAddress_type;
  _GridAddress_type GridAddress;

   typedef  ::pdu_msgs::FuseStatus_<ContainerAllocator>  _fuse_1_type;
  _fuse_1_type fuse_1;

   typedef  ::pdu_msgs::FuseStatus_<ContainerAllocator>  _fuse_2_type;
  _fuse_2_type fuse_2;

   typedef  ::pdu_msgs::FuseStatus_<ContainerAllocator>  _fuse_3_type;
  _fuse_3_type fuse_3;

   typedef  ::pdu_msgs::FuseStatus_<ContainerAllocator>  _fuse_4_type;
  _fuse_4_type fuse_4;

   typedef  ::pdu_msgs::FuseStatus_<ContainerAllocator>  _fuse_5_type;
  _fuse_5_type fuse_5;

   typedef  ::pdu_msgs::FuseStatus_<ContainerAllocator>  _fuse_6_type;
  _fuse_6_type fuse_6;

   typedef  ::pdu_msgs::FuseStatus_<ContainerAllocator>  _fuse_7_type;
  _fuse_7_type fuse_7;

   typedef  ::pdu_msgs::FuseStatus_<ContainerAllocator>  _fuse_8_type;
  _fuse_8_type fuse_8;

   typedef  ::pdu_msgs::FuseStatus_<ContainerAllocator>  _fuse_9_type;
  _fuse_9_type fuse_9;

   typedef  ::pdu_msgs::FuseStatus_<ContainerAllocator>  _fuse_10_type;
  _fuse_10_type fuse_10;

   typedef  ::pdu_msgs::FuseStatus_<ContainerAllocator>  _fuse_11_type;
  _fuse_11_type fuse_11;

   typedef  ::pdu_msgs::FuseStatus_<ContainerAllocator>  _fuse_12_type;
  _fuse_12_type fuse_12;

   typedef  ::pdu_msgs::FuseStatus_<ContainerAllocator>  _fuse_13_type;
  _fuse_13_type fuse_13;

   typedef  ::pdu_msgs::FuseStatus_<ContainerAllocator>  _fuse_14_type;
  _fuse_14_type fuse_14;

   typedef  ::pdu_msgs::FuseStatus_<ContainerAllocator>  _fuse_15_type;
  _fuse_15_type fuse_15;

   typedef  ::pdu_msgs::FuseStatus_<ContainerAllocator>  _fuse_16_type;
  _fuse_16_type fuse_16;





  typedef boost::shared_ptr< ::pdu_msgs::FuseReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pdu_msgs::FuseReport_<ContainerAllocator> const> ConstPtr;

}; // struct FuseReport_

typedef ::pdu_msgs::FuseReport_<std::allocator<void> > FuseReport;

typedef boost::shared_ptr< ::pdu_msgs::FuseReport > FuseReportPtr;
typedef boost::shared_ptr< ::pdu_msgs::FuseReport const> FuseReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pdu_msgs::FuseReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pdu_msgs::FuseReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pdu_msgs::FuseReport_<ContainerAllocator1> & lhs, const ::pdu_msgs::FuseReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.GridAddress == rhs.GridAddress &&
    lhs.fuse_1 == rhs.fuse_1 &&
    lhs.fuse_2 == rhs.fuse_2 &&
    lhs.fuse_3 == rhs.fuse_3 &&
    lhs.fuse_4 == rhs.fuse_4 &&
    lhs.fuse_5 == rhs.fuse_5 &&
    lhs.fuse_6 == rhs.fuse_6 &&
    lhs.fuse_7 == rhs.fuse_7 &&
    lhs.fuse_8 == rhs.fuse_8 &&
    lhs.fuse_9 == rhs.fuse_9 &&
    lhs.fuse_10 == rhs.fuse_10 &&
    lhs.fuse_11 == rhs.fuse_11 &&
    lhs.fuse_12 == rhs.fuse_12 &&
    lhs.fuse_13 == rhs.fuse_13 &&
    lhs.fuse_14 == rhs.fuse_14 &&
    lhs.fuse_15 == rhs.fuse_15 &&
    lhs.fuse_16 == rhs.fuse_16;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pdu_msgs::FuseReport_<ContainerAllocator1> & lhs, const ::pdu_msgs::FuseReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pdu_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pdu_msgs::FuseReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pdu_msgs::FuseReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pdu_msgs::FuseReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pdu_msgs::FuseReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pdu_msgs::FuseReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pdu_msgs::FuseReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pdu_msgs::FuseReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4b7abf88dd96ecf35a3983dc0c26eef";
  }

  static const char* value(const ::pdu_msgs::FuseReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4b7abf88dd96ecfULL;
  static const uint64_t static_value2 = 0x35a3983dc0c26eefULL;
};

template<class ContainerAllocator>
struct DataType< ::pdu_msgs::FuseReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pdu_msgs/FuseReport";
  }

  static const char* value(const ::pdu_msgs::FuseReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pdu_msgs::FuseReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# Fuse status enumeration\n"
"uint8 GridAddress\n"
"\n"
"FuseStatus fuse_1\n"
"FuseStatus fuse_2\n"
"FuseStatus fuse_3\n"
"FuseStatus fuse_4\n"
"FuseStatus fuse_5\n"
"FuseStatus fuse_6\n"
"FuseStatus fuse_7\n"
"FuseStatus fuse_8\n"
"FuseStatus fuse_9\n"
"FuseStatus fuse_10\n"
"FuseStatus fuse_11\n"
"FuseStatus fuse_12\n"
"FuseStatus fuse_13\n"
"FuseStatus fuse_14\n"
"FuseStatus fuse_15\n"
"FuseStatus fuse_16\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: pdu_msgs/FuseStatus\n"
"uint8 value\n"
"\n"
"uint8 NO_FAULT = 0\n"
"uint8 BLOWN = 1\n"
"uint8 NOT_POWERED = 2\n"
"uint8 NOT_USED = 3\n"
;
  }

  static const char* value(const ::pdu_msgs::FuseReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pdu_msgs::FuseReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.GridAddress);
      stream.next(m.fuse_1);
      stream.next(m.fuse_2);
      stream.next(m.fuse_3);
      stream.next(m.fuse_4);
      stream.next(m.fuse_5);
      stream.next(m.fuse_6);
      stream.next(m.fuse_7);
      stream.next(m.fuse_8);
      stream.next(m.fuse_9);
      stream.next(m.fuse_10);
      stream.next(m.fuse_11);
      stream.next(m.fuse_12);
      stream.next(m.fuse_13);
      stream.next(m.fuse_14);
      stream.next(m.fuse_15);
      stream.next(m.fuse_16);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FuseReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pdu_msgs::FuseReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pdu_msgs::FuseReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "GridAddress: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GridAddress);
    s << indent << "fuse_1: ";
    s << std::endl;
    Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.fuse_1);
    s << indent << "fuse_2: ";
    s << std::endl;
    Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.fuse_2);
    s << indent << "fuse_3: ";
    s << std::endl;
    Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.fuse_3);
    s << indent << "fuse_4: ";
    s << std::endl;
    Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.fuse_4);
    s << indent << "fuse_5: ";
    s << std::endl;
    Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.fuse_5);
    s << indent << "fuse_6: ";
    s << std::endl;
    Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.fuse_6);
    s << indent << "fuse_7: ";
    s << std::endl;
    Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.fuse_7);
    s << indent << "fuse_8: ";
    s << std::endl;
    Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.fuse_8);
    s << indent << "fuse_9: ";
    s << std::endl;
    Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.fuse_9);
    s << indent << "fuse_10: ";
    s << std::endl;
    Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.fuse_10);
    s << indent << "fuse_11: ";
    s << std::endl;
    Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.fuse_11);
    s << indent << "fuse_12: ";
    s << std::endl;
    Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.fuse_12);
    s << indent << "fuse_13: ";
    s << std::endl;
    Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.fuse_13);
    s << indent << "fuse_14: ";
    s << std::endl;
    Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.fuse_14);
    s << indent << "fuse_15: ";
    s << std::endl;
    Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.fuse_15);
    s << indent << "fuse_16: ";
    s << std::endl;
    Printer< ::pdu_msgs::FuseStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.fuse_16);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PDU_MSGS_MESSAGE_FUSEREPORT_H
