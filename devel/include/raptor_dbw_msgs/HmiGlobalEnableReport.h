// Generated by gencpp from file raptor_dbw_msgs/HmiGlobalEnableReport.msg
// DO NOT EDIT!


#ifndef RAPTOR_DBW_MSGS_MESSAGE_HMIGLOBALENABLEREPORT_H
#define RAPTOR_DBW_MSGS_MESSAGE_HMIGLOBALENABLEREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace raptor_dbw_msgs
{
template <class ContainerAllocator>
struct HmiGlobalEnableReport_
{
  typedef HmiGlobalEnableReport_<ContainerAllocator> Type;

  HmiGlobalEnableReport_()
    : header()
    , enable_request(false)
    , disable_request(false)
    , checksum(0)
    , ecu_build_number(0)
    , rolling_counter(0)  {
    }
  HmiGlobalEnableReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , enable_request(false)
    , disable_request(false)
    , checksum(0)
    , ecu_build_number(0)
    , rolling_counter(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _enable_request_type;
  _enable_request_type enable_request;

   typedef uint8_t _disable_request_type;
  _disable_request_type disable_request;

   typedef uint8_t _checksum_type;
  _checksum_type checksum;

   typedef uint16_t _ecu_build_number_type;
  _ecu_build_number_type ecu_build_number;

   typedef uint8_t _rolling_counter_type;
  _rolling_counter_type rolling_counter;





  typedef boost::shared_ptr< ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator> const> ConstPtr;

}; // struct HmiGlobalEnableReport_

typedef ::raptor_dbw_msgs::HmiGlobalEnableReport_<std::allocator<void> > HmiGlobalEnableReport;

typedef boost::shared_ptr< ::raptor_dbw_msgs::HmiGlobalEnableReport > HmiGlobalEnableReportPtr;
typedef boost::shared_ptr< ::raptor_dbw_msgs::HmiGlobalEnableReport const> HmiGlobalEnableReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.enable_request == rhs.enable_request &&
    lhs.disable_request == rhs.disable_request &&
    lhs.checksum == rhs.checksum &&
    lhs.ecu_build_number == rhs.ecu_build_number &&
    lhs.rolling_counter == rhs.rolling_counter;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace raptor_dbw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "29d00e37d7749f78ca339d3a70968c0e";
  }

  static const char* value(const ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x29d00e37d7749f78ULL;
  static const uint64_t static_value2 = 0xca339d3a70968c0eULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raptor_dbw_msgs/HmiGlobalEnableReport";
  }

  static const char* value(const ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"bool enable_request\n"
"\n"
"bool disable_request\n"
"\n"
"uint8 checksum\n"
"\n"
"uint16 ecu_build_number\n"
"\n"
"uint8 rolling_counter\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.enable_request);
      stream.next(m.disable_request);
      stream.next(m.checksum);
      stream.next(m.ecu_build_number);
      stream.next(m.rolling_counter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HmiGlobalEnableReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raptor_dbw_msgs::HmiGlobalEnableReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "enable_request: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_request);
    s << indent << "disable_request: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.disable_request);
    s << indent << "checksum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.checksum);
    s << indent << "ecu_build_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ecu_build_number);
    s << indent << "rolling_counter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rolling_counter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAPTOR_DBW_MSGS_MESSAGE_HMIGLOBALENABLEREPORT_H
