# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from raptor_dbw_msgs/MiscReport.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class MiscReport(genpy.Message):
  _md5sum = "3f121c2cad2d402df05aa09b1e1117c0"
  _type = "raptor_dbw_msgs/MiscReport"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

float32 fuel_level          # %
bool drive_by_wire_enabled
float32 vehicle_speed       # km/h
uint16 software_build_number
bool general_actuator_fault
bool by_wire_ready
bool general_driver_activity
bool comms_fault
float32 ambient_temp # degrees-C
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','fuel_level','drive_by_wire_enabled','vehicle_speed','software_build_number','general_actuator_fault','by_wire_ready','general_driver_activity','comms_fault','ambient_temp']
  _slot_types = ['std_msgs/Header','float32','bool','float32','uint16','bool','bool','bool','bool','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,fuel_level,drive_by_wire_enabled,vehicle_speed,software_build_number,general_actuator_fault,by_wire_ready,general_driver_activity,comms_fault,ambient_temp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MiscReport, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fuel_level is None:
        self.fuel_level = 0.
      if self.drive_by_wire_enabled is None:
        self.drive_by_wire_enabled = False
      if self.vehicle_speed is None:
        self.vehicle_speed = 0.
      if self.software_build_number is None:
        self.software_build_number = 0
      if self.general_actuator_fault is None:
        self.general_actuator_fault = False
      if self.by_wire_ready is None:
        self.by_wire_ready = False
      if self.general_driver_activity is None:
        self.general_driver_activity = False
      if self.comms_fault is None:
        self.comms_fault = False
      if self.ambient_temp is None:
        self.ambient_temp = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.fuel_level = 0.
      self.drive_by_wire_enabled = False
      self.vehicle_speed = 0.
      self.software_build_number = 0
      self.general_actuator_fault = False
      self.by_wire_ready = False
      self.general_driver_activity = False
      self.comms_fault = False
      self.ambient_temp = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_fBfH4Bf().pack(_x.fuel_level, _x.drive_by_wire_enabled, _x.vehicle_speed, _x.software_build_number, _x.general_actuator_fault, _x.by_wire_ready, _x.general_driver_activity, _x.comms_fault, _x.ambient_temp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.fuel_level, _x.drive_by_wire_enabled, _x.vehicle_speed, _x.software_build_number, _x.general_actuator_fault, _x.by_wire_ready, _x.general_driver_activity, _x.comms_fault, _x.ambient_temp,) = _get_struct_fBfH4Bf().unpack(str[start:end])
      self.drive_by_wire_enabled = bool(self.drive_by_wire_enabled)
      self.general_actuator_fault = bool(self.general_actuator_fault)
      self.by_wire_ready = bool(self.by_wire_ready)
      self.general_driver_activity = bool(self.general_driver_activity)
      self.comms_fault = bool(self.comms_fault)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_fBfH4Bf().pack(_x.fuel_level, _x.drive_by_wire_enabled, _x.vehicle_speed, _x.software_build_number, _x.general_actuator_fault, _x.by_wire_ready, _x.general_driver_activity, _x.comms_fault, _x.ambient_temp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.fuel_level, _x.drive_by_wire_enabled, _x.vehicle_speed, _x.software_build_number, _x.general_actuator_fault, _x.by_wire_ready, _x.general_driver_activity, _x.comms_fault, _x.ambient_temp,) = _get_struct_fBfH4Bf().unpack(str[start:end])
      self.drive_by_wire_enabled = bool(self.drive_by_wire_enabled)
      self.general_actuator_fault = bool(self.general_actuator_fault)
      self.by_wire_ready = bool(self.by_wire_ready)
      self.general_driver_activity = bool(self.general_driver_activity)
      self.comms_fault = bool(self.comms_fault)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_fBfH4Bf = None
def _get_struct_fBfH4Bf():
    global _struct_fBfH4Bf
    if _struct_fBfH4Bf is None:
        _struct_fBfH4Bf = struct.Struct("<fBfH4Bf")
    return _struct_fBfH4Bf
