// Generated by gencpp from file deeporange14_msgs/AuStatusMsg.msg
// DO NOT EDIT!


#ifndef DEEPORANGE14_MSGS_MESSAGE_AUSTATUSMSG_H
#define DEEPORANGE14_MSGS_MESSAGE_AUSTATUSMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace deeporange14_msgs
{
template <class ContainerAllocator>
struct AuStatusMsg_
{
  typedef AuStatusMsg_<ContainerAllocator> Type;

  AuStatusMsg_()
    : header()
    , seq(0)
    , stamp()
    , measuredVx(0.0)
    , measuredWz(0.0)
    , rtkStatus(0)
    , timesecVx(0.0)
    , timesecWz(0.0)
    , timesecRtk(0.0)  {
    }
  AuStatusMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , seq(0)
    , stamp()
    , measuredVx(0.0)
    , measuredWz(0.0)
    , rtkStatus(0)
    , timesecVx(0.0)
    , timesecWz(0.0)
    , timesecRtk(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef double _measuredVx_type;
  _measuredVx_type measuredVx;

   typedef double _measuredWz_type;
  _measuredWz_type measuredWz;

   typedef uint8_t _rtkStatus_type;
  _rtkStatus_type rtkStatus;

   typedef double _timesecVx_type;
  _timesecVx_type timesecVx;

   typedef double _timesecWz_type;
  _timesecWz_type timesecWz;

   typedef double _timesecRtk_type;
  _timesecRtk_type timesecRtk;





  typedef boost::shared_ptr< ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator> const> ConstPtr;

}; // struct AuStatusMsg_

typedef ::deeporange14_msgs::AuStatusMsg_<std::allocator<void> > AuStatusMsg;

typedef boost::shared_ptr< ::deeporange14_msgs::AuStatusMsg > AuStatusMsgPtr;
typedef boost::shared_ptr< ::deeporange14_msgs::AuStatusMsg const> AuStatusMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator1> & lhs, const ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.seq == rhs.seq &&
    lhs.stamp == rhs.stamp &&
    lhs.measuredVx == rhs.measuredVx &&
    lhs.measuredWz == rhs.measuredWz &&
    lhs.rtkStatus == rhs.rtkStatus &&
    lhs.timesecVx == rhs.timesecVx &&
    lhs.timesecWz == rhs.timesecWz &&
    lhs.timesecRtk == rhs.timesecRtk;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator1> & lhs, const ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace deeporange14_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "91fca660e197d2c15adbbf497ed3e284";
  }

  static const char* value(const ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x91fca660e197d2c1ULL;
  static const uint64_t static_value2 = 0x5adbbf497ed3e284ULL;
};

template<class ContainerAllocator>
struct DataType< ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deeporange14_msgs/AuStatusMsg";
  }

  static const char* value(const ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Measured velocities from gps; Vx -> novatel/odom; Wz -> novatel/corrimu \n"
"Header header\n"
"  uint32 seq\n"
"  time stamp\n"
"float64 measuredVx\n"
"float64 measuredWz\n"
"uint8 rtkStatus\n"
"float64 timesecVx\n"
"float64 timesecWz\n"
"float64 timesecRtk\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.seq);
      stream.next(m.stamp);
      stream.next(m.measuredVx);
      stream.next(m.measuredWz);
      stream.next(m.rtkStatus);
      stream.next(m.timesecVx);
      stream.next(m.timesecWz);
      stream.next(m.timesecRtk);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AuStatusMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deeporange14_msgs::AuStatusMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "measuredVx: ";
    Printer<double>::stream(s, indent + "  ", v.measuredVx);
    s << indent << "measuredWz: ";
    Printer<double>::stream(s, indent + "  ", v.measuredWz);
    s << indent << "rtkStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rtkStatus);
    s << indent << "timesecVx: ";
    Printer<double>::stream(s, indent + "  ", v.timesecVx);
    s << indent << "timesecWz: ";
    Printer<double>::stream(s, indent + "  ", v.timesecWz);
    s << indent << "timesecRtk: ";
    Printer<double>::stream(s, indent + "  ", v.timesecRtk);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEEPORANGE14_MSGS_MESSAGE_AUSTATUSMSG_H
