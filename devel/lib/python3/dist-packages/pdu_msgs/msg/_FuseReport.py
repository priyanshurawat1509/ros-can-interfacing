# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pdu_msgs/FuseReport.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pdu_msgs.msg
import std_msgs.msg

class FuseReport(genpy.Message):
  _md5sum = "f4b7abf88dd96ecf35a3983dc0c26eef"
  _type = "pdu_msgs/FuseReport"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

# Fuse status enumeration
uint8 GridAddress

FuseStatus fuse_1
FuseStatus fuse_2
FuseStatus fuse_3
FuseStatus fuse_4
FuseStatus fuse_5
FuseStatus fuse_6
FuseStatus fuse_7
FuseStatus fuse_8
FuseStatus fuse_9
FuseStatus fuse_10
FuseStatus fuse_11
FuseStatus fuse_12
FuseStatus fuse_13
FuseStatus fuse_14
FuseStatus fuse_15
FuseStatus fuse_16

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: pdu_msgs/FuseStatus
uint8 value

uint8 NO_FAULT = 0
uint8 BLOWN = 1
uint8 NOT_POWERED = 2
uint8 NOT_USED = 3
"""
  __slots__ = ['header','GridAddress','fuse_1','fuse_2','fuse_3','fuse_4','fuse_5','fuse_6','fuse_7','fuse_8','fuse_9','fuse_10','fuse_11','fuse_12','fuse_13','fuse_14','fuse_15','fuse_16']
  _slot_types = ['std_msgs/Header','uint8','pdu_msgs/FuseStatus','pdu_msgs/FuseStatus','pdu_msgs/FuseStatus','pdu_msgs/FuseStatus','pdu_msgs/FuseStatus','pdu_msgs/FuseStatus','pdu_msgs/FuseStatus','pdu_msgs/FuseStatus','pdu_msgs/FuseStatus','pdu_msgs/FuseStatus','pdu_msgs/FuseStatus','pdu_msgs/FuseStatus','pdu_msgs/FuseStatus','pdu_msgs/FuseStatus','pdu_msgs/FuseStatus','pdu_msgs/FuseStatus']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,GridAddress,fuse_1,fuse_2,fuse_3,fuse_4,fuse_5,fuse_6,fuse_7,fuse_8,fuse_9,fuse_10,fuse_11,fuse_12,fuse_13,fuse_14,fuse_15,fuse_16

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FuseReport, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.GridAddress is None:
        self.GridAddress = 0
      if self.fuse_1 is None:
        self.fuse_1 = pdu_msgs.msg.FuseStatus()
      if self.fuse_2 is None:
        self.fuse_2 = pdu_msgs.msg.FuseStatus()
      if self.fuse_3 is None:
        self.fuse_3 = pdu_msgs.msg.FuseStatus()
      if self.fuse_4 is None:
        self.fuse_4 = pdu_msgs.msg.FuseStatus()
      if self.fuse_5 is None:
        self.fuse_5 = pdu_msgs.msg.FuseStatus()
      if self.fuse_6 is None:
        self.fuse_6 = pdu_msgs.msg.FuseStatus()
      if self.fuse_7 is None:
        self.fuse_7 = pdu_msgs.msg.FuseStatus()
      if self.fuse_8 is None:
        self.fuse_8 = pdu_msgs.msg.FuseStatus()
      if self.fuse_9 is None:
        self.fuse_9 = pdu_msgs.msg.FuseStatus()
      if self.fuse_10 is None:
        self.fuse_10 = pdu_msgs.msg.FuseStatus()
      if self.fuse_11 is None:
        self.fuse_11 = pdu_msgs.msg.FuseStatus()
      if self.fuse_12 is None:
        self.fuse_12 = pdu_msgs.msg.FuseStatus()
      if self.fuse_13 is None:
        self.fuse_13 = pdu_msgs.msg.FuseStatus()
      if self.fuse_14 is None:
        self.fuse_14 = pdu_msgs.msg.FuseStatus()
      if self.fuse_15 is None:
        self.fuse_15 = pdu_msgs.msg.FuseStatus()
      if self.fuse_16 is None:
        self.fuse_16 = pdu_msgs.msg.FuseStatus()
    else:
      self.header = std_msgs.msg.Header()
      self.GridAddress = 0
      self.fuse_1 = pdu_msgs.msg.FuseStatus()
      self.fuse_2 = pdu_msgs.msg.FuseStatus()
      self.fuse_3 = pdu_msgs.msg.FuseStatus()
      self.fuse_4 = pdu_msgs.msg.FuseStatus()
      self.fuse_5 = pdu_msgs.msg.FuseStatus()
      self.fuse_6 = pdu_msgs.msg.FuseStatus()
      self.fuse_7 = pdu_msgs.msg.FuseStatus()
      self.fuse_8 = pdu_msgs.msg.FuseStatus()
      self.fuse_9 = pdu_msgs.msg.FuseStatus()
      self.fuse_10 = pdu_msgs.msg.FuseStatus()
      self.fuse_11 = pdu_msgs.msg.FuseStatus()
      self.fuse_12 = pdu_msgs.msg.FuseStatus()
      self.fuse_13 = pdu_msgs.msg.FuseStatus()
      self.fuse_14 = pdu_msgs.msg.FuseStatus()
      self.fuse_15 = pdu_msgs.msg.FuseStatus()
      self.fuse_16 = pdu_msgs.msg.FuseStatus()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_17B().pack(_x.GridAddress, _x.fuse_1.value, _x.fuse_2.value, _x.fuse_3.value, _x.fuse_4.value, _x.fuse_5.value, _x.fuse_6.value, _x.fuse_7.value, _x.fuse_8.value, _x.fuse_9.value, _x.fuse_10.value, _x.fuse_11.value, _x.fuse_12.value, _x.fuse_13.value, _x.fuse_14.value, _x.fuse_15.value, _x.fuse_16.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fuse_1 is None:
        self.fuse_1 = pdu_msgs.msg.FuseStatus()
      if self.fuse_2 is None:
        self.fuse_2 = pdu_msgs.msg.FuseStatus()
      if self.fuse_3 is None:
        self.fuse_3 = pdu_msgs.msg.FuseStatus()
      if self.fuse_4 is None:
        self.fuse_4 = pdu_msgs.msg.FuseStatus()
      if self.fuse_5 is None:
        self.fuse_5 = pdu_msgs.msg.FuseStatus()
      if self.fuse_6 is None:
        self.fuse_6 = pdu_msgs.msg.FuseStatus()
      if self.fuse_7 is None:
        self.fuse_7 = pdu_msgs.msg.FuseStatus()
      if self.fuse_8 is None:
        self.fuse_8 = pdu_msgs.msg.FuseStatus()
      if self.fuse_9 is None:
        self.fuse_9 = pdu_msgs.msg.FuseStatus()
      if self.fuse_10 is None:
        self.fuse_10 = pdu_msgs.msg.FuseStatus()
      if self.fuse_11 is None:
        self.fuse_11 = pdu_msgs.msg.FuseStatus()
      if self.fuse_12 is None:
        self.fuse_12 = pdu_msgs.msg.FuseStatus()
      if self.fuse_13 is None:
        self.fuse_13 = pdu_msgs.msg.FuseStatus()
      if self.fuse_14 is None:
        self.fuse_14 = pdu_msgs.msg.FuseStatus()
      if self.fuse_15 is None:
        self.fuse_15 = pdu_msgs.msg.FuseStatus()
      if self.fuse_16 is None:
        self.fuse_16 = pdu_msgs.msg.FuseStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.GridAddress, _x.fuse_1.value, _x.fuse_2.value, _x.fuse_3.value, _x.fuse_4.value, _x.fuse_5.value, _x.fuse_6.value, _x.fuse_7.value, _x.fuse_8.value, _x.fuse_9.value, _x.fuse_10.value, _x.fuse_11.value, _x.fuse_12.value, _x.fuse_13.value, _x.fuse_14.value, _x.fuse_15.value, _x.fuse_16.value,) = _get_struct_17B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_17B().pack(_x.GridAddress, _x.fuse_1.value, _x.fuse_2.value, _x.fuse_3.value, _x.fuse_4.value, _x.fuse_5.value, _x.fuse_6.value, _x.fuse_7.value, _x.fuse_8.value, _x.fuse_9.value, _x.fuse_10.value, _x.fuse_11.value, _x.fuse_12.value, _x.fuse_13.value, _x.fuse_14.value, _x.fuse_15.value, _x.fuse_16.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fuse_1 is None:
        self.fuse_1 = pdu_msgs.msg.FuseStatus()
      if self.fuse_2 is None:
        self.fuse_2 = pdu_msgs.msg.FuseStatus()
      if self.fuse_3 is None:
        self.fuse_3 = pdu_msgs.msg.FuseStatus()
      if self.fuse_4 is None:
        self.fuse_4 = pdu_msgs.msg.FuseStatus()
      if self.fuse_5 is None:
        self.fuse_5 = pdu_msgs.msg.FuseStatus()
      if self.fuse_6 is None:
        self.fuse_6 = pdu_msgs.msg.FuseStatus()
      if self.fuse_7 is None:
        self.fuse_7 = pdu_msgs.msg.FuseStatus()
      if self.fuse_8 is None:
        self.fuse_8 = pdu_msgs.msg.FuseStatus()
      if self.fuse_9 is None:
        self.fuse_9 = pdu_msgs.msg.FuseStatus()
      if self.fuse_10 is None:
        self.fuse_10 = pdu_msgs.msg.FuseStatus()
      if self.fuse_11 is None:
        self.fuse_11 = pdu_msgs.msg.FuseStatus()
      if self.fuse_12 is None:
        self.fuse_12 = pdu_msgs.msg.FuseStatus()
      if self.fuse_13 is None:
        self.fuse_13 = pdu_msgs.msg.FuseStatus()
      if self.fuse_14 is None:
        self.fuse_14 = pdu_msgs.msg.FuseStatus()
      if self.fuse_15 is None:
        self.fuse_15 = pdu_msgs.msg.FuseStatus()
      if self.fuse_16 is None:
        self.fuse_16 = pdu_msgs.msg.FuseStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.GridAddress, _x.fuse_1.value, _x.fuse_2.value, _x.fuse_3.value, _x.fuse_4.value, _x.fuse_5.value, _x.fuse_6.value, _x.fuse_7.value, _x.fuse_8.value, _x.fuse_9.value, _x.fuse_10.value, _x.fuse_11.value, _x.fuse_12.value, _x.fuse_13.value, _x.fuse_14.value, _x.fuse_15.value, _x.fuse_16.value,) = _get_struct_17B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17B = None
def _get_struct_17B():
    global _struct_17B
    if _struct_17B is None:
        _struct_17B = struct.Struct("<17B")
    return _struct_17B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
