// Generated by gencpp from file raptor_dbw_msgs/AcceleratorPedalReport.msg
// DO NOT EDIT!


#ifndef RAPTOR_DBW_MSGS_MESSAGE_ACCELERATORPEDALREPORT_H
#define RAPTOR_DBW_MSGS_MESSAGE_ACCELERATORPEDALREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <raptor_dbw_msgs/ActuatorControlMode.h>

namespace raptor_dbw_msgs
{
template <class ContainerAllocator>
struct AcceleratorPedalReport_
{
  typedef AcceleratorPedalReport_<ContainerAllocator> Type;

  AcceleratorPedalReport_()
    : header()
    , pedal_input(0.0)
    , pedal_output(0.0)
    , enabled(false)
    , ignore_driver(false)
    , driver_activity(false)
    , fault_accel_pedal_system(false)
    , fault_ch1(false)
    , fault_ch2(false)
    , rolling_counter(0)
    , torque_actual(0.0)
    , control_type()  {
    }
  AcceleratorPedalReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pedal_input(0.0)
    , pedal_output(0.0)
    , enabled(false)
    , ignore_driver(false)
    , driver_activity(false)
    , fault_accel_pedal_system(false)
    , fault_ch1(false)
    , fault_ch2(false)
    , rolling_counter(0)
    , torque_actual(0.0)
    , control_type(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _pedal_input_type;
  _pedal_input_type pedal_input;

   typedef float _pedal_output_type;
  _pedal_output_type pedal_output;

   typedef uint8_t _enabled_type;
  _enabled_type enabled;

   typedef uint8_t _ignore_driver_type;
  _ignore_driver_type ignore_driver;

   typedef uint8_t _driver_activity_type;
  _driver_activity_type driver_activity;

   typedef uint8_t _fault_accel_pedal_system_type;
  _fault_accel_pedal_system_type fault_accel_pedal_system;

   typedef uint8_t _fault_ch1_type;
  _fault_ch1_type fault_ch1;

   typedef uint8_t _fault_ch2_type;
  _fault_ch2_type fault_ch2;

   typedef uint8_t _rolling_counter_type;
  _rolling_counter_type rolling_counter;

   typedef float _torque_actual_type;
  _torque_actual_type torque_actual;

   typedef  ::raptor_dbw_msgs::ActuatorControlMode_<ContainerAllocator>  _control_type_type;
  _control_type_type control_type;





  typedef boost::shared_ptr< ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator> const> ConstPtr;

}; // struct AcceleratorPedalReport_

typedef ::raptor_dbw_msgs::AcceleratorPedalReport_<std::allocator<void> > AcceleratorPedalReport;

typedef boost::shared_ptr< ::raptor_dbw_msgs::AcceleratorPedalReport > AcceleratorPedalReportPtr;
typedef boost::shared_ptr< ::raptor_dbw_msgs::AcceleratorPedalReport const> AcceleratorPedalReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pedal_input == rhs.pedal_input &&
    lhs.pedal_output == rhs.pedal_output &&
    lhs.enabled == rhs.enabled &&
    lhs.ignore_driver == rhs.ignore_driver &&
    lhs.driver_activity == rhs.driver_activity &&
    lhs.fault_accel_pedal_system == rhs.fault_accel_pedal_system &&
    lhs.fault_ch1 == rhs.fault_ch1 &&
    lhs.fault_ch2 == rhs.fault_ch2 &&
    lhs.rolling_counter == rhs.rolling_counter &&
    lhs.torque_actual == rhs.torque_actual &&
    lhs.control_type == rhs.control_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace raptor_dbw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "79e5f58f94a8fa77ed7d602d29d0230c";
  }

  static const char* value(const ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x79e5f58f94a8fa77ULL;
  static const uint64_t static_value2 = 0xed7d602d29d0230cULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raptor_dbw_msgs/AcceleratorPedalReport";
  }

  static const char* value(const ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# Accelerator pedal\n"
"# 0 to 100%\n"
"float32 pedal_input\n"
"float32 pedal_output\n"
"\n"
"# Status\n"
"bool enabled\n"
"bool ignore_driver\n"
"bool driver_activity   # Driver activity\n"
"\n"
"bool fault_accel_pedal_system\n"
"\n"
"# Faults\n"
"bool fault_ch1\n"
"bool fault_ch2\n"
"\n"
"uint8 rolling_counter\n"
"\n"
"float32 torque_actual # 0 to 100%\n"
"\n"
"ActuatorControlMode control_type\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: raptor_dbw_msgs/ActuatorControlMode\n"
"uint8 value\n"
"\n"
"uint8 open_loop = 0\n"
"uint8 closed_loop_actuator = 1\n"
"uint8 closed_loop_vehicle = 2\n"
"uint8 none = 255\n"
;
  }

  static const char* value(const ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pedal_input);
      stream.next(m.pedal_output);
      stream.next(m.enabled);
      stream.next(m.ignore_driver);
      stream.next(m.driver_activity);
      stream.next(m.fault_accel_pedal_system);
      stream.next(m.fault_ch1);
      stream.next(m.fault_ch2);
      stream.next(m.rolling_counter);
      stream.next(m.torque_actual);
      stream.next(m.control_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AcceleratorPedalReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raptor_dbw_msgs::AcceleratorPedalReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pedal_input: ";
    Printer<float>::stream(s, indent + "  ", v.pedal_input);
    s << indent << "pedal_output: ";
    Printer<float>::stream(s, indent + "  ", v.pedal_output);
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
    s << indent << "ignore_driver: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ignore_driver);
    s << indent << "driver_activity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.driver_activity);
    s << indent << "fault_accel_pedal_system: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fault_accel_pedal_system);
    s << indent << "fault_ch1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fault_ch1);
    s << indent << "fault_ch2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fault_ch2);
    s << indent << "rolling_counter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rolling_counter);
    s << indent << "torque_actual: ";
    Printer<float>::stream(s, indent + "  ", v.torque_actual);
    s << indent << "control_type: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::ActuatorControlMode_<ContainerAllocator> >::stream(s, indent + "  ", v.control_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAPTOR_DBW_MSGS_MESSAGE_ACCELERATORPEDALREPORT_H
