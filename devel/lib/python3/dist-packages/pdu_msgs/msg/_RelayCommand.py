# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pdu_msgs/RelayCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pdu_msgs.msg

class RelayCommand(genpy.Message):
  _md5sum = "2244ce8be7c2912abb85c303db68d2b3"
  _type = "pdu_msgs/RelayCommand"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Relay state enumerations

RelayState relay_1
RelayState relay_2
RelayState relay_3
RelayState relay_4
RelayState relay_5
RelayState relay_6
RelayState relay_7
RelayState relay_8

================================================================================
MSG: pdu_msgs/RelayState
uint8 value

# MAINTAIN_STATE items perform the same function.
uint8 RELAY_OFF = 0
uint8 RELAY_ON = 1
uint8 MAINTAIN_STATE = 2
"""
  __slots__ = ['relay_1','relay_2','relay_3','relay_4','relay_5','relay_6','relay_7','relay_8']
  _slot_types = ['pdu_msgs/RelayState','pdu_msgs/RelayState','pdu_msgs/RelayState','pdu_msgs/RelayState','pdu_msgs/RelayState','pdu_msgs/RelayState','pdu_msgs/RelayState','pdu_msgs/RelayState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       relay_1,relay_2,relay_3,relay_4,relay_5,relay_6,relay_7,relay_8

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RelayCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.relay_1 is None:
        self.relay_1 = pdu_msgs.msg.RelayState()
      if self.relay_2 is None:
        self.relay_2 = pdu_msgs.msg.RelayState()
      if self.relay_3 is None:
        self.relay_3 = pdu_msgs.msg.RelayState()
      if self.relay_4 is None:
        self.relay_4 = pdu_msgs.msg.RelayState()
      if self.relay_5 is None:
        self.relay_5 = pdu_msgs.msg.RelayState()
      if self.relay_6 is None:
        self.relay_6 = pdu_msgs.msg.RelayState()
      if self.relay_7 is None:
        self.relay_7 = pdu_msgs.msg.RelayState()
      if self.relay_8 is None:
        self.relay_8 = pdu_msgs.msg.RelayState()
    else:
      self.relay_1 = pdu_msgs.msg.RelayState()
      self.relay_2 = pdu_msgs.msg.RelayState()
      self.relay_3 = pdu_msgs.msg.RelayState()
      self.relay_4 = pdu_msgs.msg.RelayState()
      self.relay_5 = pdu_msgs.msg.RelayState()
      self.relay_6 = pdu_msgs.msg.RelayState()
      self.relay_7 = pdu_msgs.msg.RelayState()
      self.relay_8 = pdu_msgs.msg.RelayState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.relay_1.value, _x.relay_2.value, _x.relay_3.value, _x.relay_4.value, _x.relay_5.value, _x.relay_6.value, _x.relay_7.value, _x.relay_8.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.relay_1 is None:
        self.relay_1 = pdu_msgs.msg.RelayState()
      if self.relay_2 is None:
        self.relay_2 = pdu_msgs.msg.RelayState()
      if self.relay_3 is None:
        self.relay_3 = pdu_msgs.msg.RelayState()
      if self.relay_4 is None:
        self.relay_4 = pdu_msgs.msg.RelayState()
      if self.relay_5 is None:
        self.relay_5 = pdu_msgs.msg.RelayState()
      if self.relay_6 is None:
        self.relay_6 = pdu_msgs.msg.RelayState()
      if self.relay_7 is None:
        self.relay_7 = pdu_msgs.msg.RelayState()
      if self.relay_8 is None:
        self.relay_8 = pdu_msgs.msg.RelayState()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.relay_1.value, _x.relay_2.value, _x.relay_3.value, _x.relay_4.value, _x.relay_5.value, _x.relay_6.value, _x.relay_7.value, _x.relay_8.value,) = _get_struct_8B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.relay_1.value, _x.relay_2.value, _x.relay_3.value, _x.relay_4.value, _x.relay_5.value, _x.relay_6.value, _x.relay_7.value, _x.relay_8.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.relay_1 is None:
        self.relay_1 = pdu_msgs.msg.RelayState()
      if self.relay_2 is None:
        self.relay_2 = pdu_msgs.msg.RelayState()
      if self.relay_3 is None:
        self.relay_3 = pdu_msgs.msg.RelayState()
      if self.relay_4 is None:
        self.relay_4 = pdu_msgs.msg.RelayState()
      if self.relay_5 is None:
        self.relay_5 = pdu_msgs.msg.RelayState()
      if self.relay_6 is None:
        self.relay_6 = pdu_msgs.msg.RelayState()
      if self.relay_7 is None:
        self.relay_7 = pdu_msgs.msg.RelayState()
      if self.relay_8 is None:
        self.relay_8 = pdu_msgs.msg.RelayState()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.relay_1.value, _x.relay_2.value, _x.relay_3.value, _x.relay_4.value, _x.relay_5.value, _x.relay_6.value, _x.relay_7.value, _x.relay_8.value,) = _get_struct_8B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
