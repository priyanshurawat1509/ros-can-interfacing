// Generated by gencpp from file raptor_dbw_msgs/GlobalEnableCmd.msg
// DO NOT EDIT!


#ifndef RAPTOR_DBW_MSGS_MESSAGE_GLOBALENABLECMD_H
#define RAPTOR_DBW_MSGS_MESSAGE_GLOBALENABLECMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace raptor_dbw_msgs
{
template <class ContainerAllocator>
struct GlobalEnableCmd_
{
  typedef GlobalEnableCmd_<ContainerAllocator> Type;

  GlobalEnableCmd_()
    : global_enable(false)
    , enable_joystick_limits(false)
    , ecu_build_number(0)
    , rolling_counter(0)  {
    }
  GlobalEnableCmd_(const ContainerAllocator& _alloc)
    : global_enable(false)
    , enable_joystick_limits(false)
    , ecu_build_number(0)
    , rolling_counter(0)  {
  (void)_alloc;
    }



   typedef uint8_t _global_enable_type;
  _global_enable_type global_enable;

   typedef uint8_t _enable_joystick_limits_type;
  _enable_joystick_limits_type enable_joystick_limits;

   typedef uint16_t _ecu_build_number_type;
  _ecu_build_number_type ecu_build_number;

   typedef uint8_t _rolling_counter_type;
  _rolling_counter_type rolling_counter;





  typedef boost::shared_ptr< ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator> const> ConstPtr;

}; // struct GlobalEnableCmd_

typedef ::raptor_dbw_msgs::GlobalEnableCmd_<std::allocator<void> > GlobalEnableCmd;

typedef boost::shared_ptr< ::raptor_dbw_msgs::GlobalEnableCmd > GlobalEnableCmdPtr;
typedef boost::shared_ptr< ::raptor_dbw_msgs::GlobalEnableCmd const> GlobalEnableCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator2> & rhs)
{
  return lhs.global_enable == rhs.global_enable &&
    lhs.enable_joystick_limits == rhs.enable_joystick_limits &&
    lhs.ecu_build_number == rhs.ecu_build_number &&
    lhs.rolling_counter == rhs.rolling_counter;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace raptor_dbw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f0b5dc490f6a75ce1884359156e63d3";
  }

  static const char* value(const ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f0b5dc490f6a75cULL;
  static const uint64_t static_value2 = 0xe1884359156e63d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raptor_dbw_msgs/GlobalEnableCmd";
  }

  static const char* value(const ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool global_enable\n"
"\n"
"bool enable_joystick_limits\n"
"\n"
"uint16 ecu_build_number\n"
"\n"
"uint8 rolling_counter\n"
;
  }

  static const char* value(const ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.global_enable);
      stream.next(m.enable_joystick_limits);
      stream.next(m.ecu_build_number);
      stream.next(m.rolling_counter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GlobalEnableCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raptor_dbw_msgs::GlobalEnableCmd_<ContainerAllocator>& v)
  {
    s << indent << "global_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.global_enable);
    s << indent << "enable_joystick_limits: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_joystick_limits);
    s << indent << "ecu_build_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ecu_build_number);
    s << indent << "rolling_counter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rolling_counter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAPTOR_DBW_MSGS_MESSAGE_GLOBALENABLECMD_H
