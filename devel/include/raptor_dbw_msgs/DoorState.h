// Generated by gencpp from file raptor_dbw_msgs/DoorState.msg
// DO NOT EDIT!


#ifndef RAPTOR_DBW_MSGS_MESSAGE_DOORSTATE_H
#define RAPTOR_DBW_MSGS_MESSAGE_DOORSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace raptor_dbw_msgs
{
template <class ContainerAllocator>
struct DoorState_
{
  typedef DoorState_<ContainerAllocator> Type;

  DoorState_()
    : value(0)  {
    }
  DoorState_(const ContainerAllocator& _alloc)
    : value(0)  {
  (void)_alloc;
    }



   typedef uint8_t _value_type;
  _value_type value;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNDEFINED)
  #undef UNDEFINED
#endif
#if defined(_WIN32) && defined(CLOSED)
  #undef CLOSED
#endif
#if defined(_WIN32) && defined(OPEN)
  #undef OPEN
#endif
#if defined(_WIN32) && defined(SNA)
  #undef SNA
#endif

  enum {
    UNDEFINED = 0u,
    CLOSED = 1u,
    OPEN = 2u,
    SNA = 3u,
  };


  typedef boost::shared_ptr< ::raptor_dbw_msgs::DoorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor_dbw_msgs::DoorState_<ContainerAllocator> const> ConstPtr;

}; // struct DoorState_

typedef ::raptor_dbw_msgs::DoorState_<std::allocator<void> > DoorState;

typedef boost::shared_ptr< ::raptor_dbw_msgs::DoorState > DoorStatePtr;
typedef boost::shared_ptr< ::raptor_dbw_msgs::DoorState const> DoorStateConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raptor_dbw_msgs::DoorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raptor_dbw_msgs::DoorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::raptor_dbw_msgs::DoorState_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::DoorState_<ContainerAllocator2> & rhs)
{
  return lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::raptor_dbw_msgs::DoorState_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::DoorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace raptor_dbw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::DoorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::DoorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::DoorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::DoorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::DoorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::DoorState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raptor_dbw_msgs::DoorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "734fc9673f17db31d1d2f7bd478bd498";
  }

  static const char* value(const ::raptor_dbw_msgs::DoorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x734fc9673f17db31ULL;
  static const uint64_t static_value2 = 0xd1d2f7bd478bd498ULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor_dbw_msgs::DoorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raptor_dbw_msgs/DoorState";
  }

  static const char* value(const ::raptor_dbw_msgs::DoorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raptor_dbw_msgs::DoorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 value\n"
"\n"
"uint8 UNDEFINED = 0\n"
"uint8 CLOSED = 1\n"
"uint8 OPEN = 2\n"
"uint8 SNA = 3\n"
;
  }

  static const char* value(const ::raptor_dbw_msgs::DoorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raptor_dbw_msgs::DoorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DoorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raptor_dbw_msgs::DoorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raptor_dbw_msgs::DoorState_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAPTOR_DBW_MSGS_MESSAGE_DOORSTATE_H
