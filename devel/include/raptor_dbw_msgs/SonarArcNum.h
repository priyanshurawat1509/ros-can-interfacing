// Generated by gencpp from file raptor_dbw_msgs/SonarArcNum.msg
// DO NOT EDIT!


#ifndef RAPTOR_DBW_MSGS_MESSAGE_SONARARCNUM_H
#define RAPTOR_DBW_MSGS_MESSAGE_SONARARCNUM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace raptor_dbw_msgs
{
template <class ContainerAllocator>
struct SonarArcNum_
{
  typedef SonarArcNum_<ContainerAllocator> Type;

  SonarArcNum_()
    : status(0)  {
    }
  SonarArcNum_(const ContainerAllocator& _alloc)
    : status(0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NO_DISTANCE)
  #undef NO_DISTANCE
#endif
#if defined(_WIN32) && defined(ARC1)
  #undef ARC1
#endif
#if defined(_WIN32) && defined(ARC2)
  #undef ARC2
#endif
#if defined(_WIN32) && defined(ARC3)
  #undef ARC3
#endif
#if defined(_WIN32) && defined(ARC4)
  #undef ARC4
#endif
#if defined(_WIN32) && defined(ARC5)
  #undef ARC5
#endif
#if defined(_WIN32) && defined(ARC6)
  #undef ARC6
#endif
#if defined(_WIN32) && defined(ARC7)
  #undef ARC7
#endif
#if defined(_WIN32) && defined(ARC8)
  #undef ARC8
#endif
#if defined(_WIN32) && defined(NO_ARC)
  #undef NO_ARC
#endif

  enum {
    NO_DISTANCE = 0u,
    ARC1 = 1u,
    ARC2 = 2u,
    ARC3 = 3u,
    ARC4 = 4u,
    ARC5 = 5u,
    ARC6 = 6u,
    ARC7 = 7u,
    ARC8 = 8u,
    NO_ARC = 15u,
  };


  typedef boost::shared_ptr< ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator> const> ConstPtr;

}; // struct SonarArcNum_

typedef ::raptor_dbw_msgs::SonarArcNum_<std::allocator<void> > SonarArcNum;

typedef boost::shared_ptr< ::raptor_dbw_msgs::SonarArcNum > SonarArcNumPtr;
typedef boost::shared_ptr< ::raptor_dbw_msgs::SonarArcNum const> SonarArcNumConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace raptor_dbw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06cc406551462e830a15f0d81395d2f4";
  }

  static const char* value(const ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06cc406551462e83ULL;
  static const uint64_t static_value2 = 0x0a15f0d81395d2f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raptor_dbw_msgs/SonarArcNum";
  }

  static const char* value(const ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 status\n"
"\n"
"# Unitless - based on bars on display\n"
"uint8 NO_DISTANCE = 0\n"
"uint8 ARC1 = 1\n"
"uint8 ARC2 = 2\n"
"uint8 ARC3 = 3\n"
"uint8 ARC4 = 4\n"
"uint8 ARC5 = 5\n"
"uint8 ARC6 = 6\n"
"uint8 ARC7 = 7\n"
"uint8 ARC8 = 8\n"
"uint8 NO_ARC = 15\n"
;
  }

  static const char* value(const ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SonarArcNum_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raptor_dbw_msgs::SonarArcNum_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAPTOR_DBW_MSGS_MESSAGE_SONARARCNUM_H
