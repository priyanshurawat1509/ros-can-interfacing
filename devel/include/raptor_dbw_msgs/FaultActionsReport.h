// Generated by gencpp from file raptor_dbw_msgs/FaultActionsReport.msg
// DO NOT EDIT!


#ifndef RAPTOR_DBW_MSGS_MESSAGE_FAULTACTIONSREPORT_H
#define RAPTOR_DBW_MSGS_MESSAGE_FAULTACTIONSREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace raptor_dbw_msgs
{
template <class ContainerAllocator>
struct FaultActionsReport_
{
  typedef FaultActionsReport_<ContainerAllocator> Type;

  FaultActionsReport_()
    : header()
    , autonomous_disabled_no_brakes(false)
    , autonomous_disabled_apply_brakes(false)
    , can_gateway_disabled(false)
    , inverter_contactor_disabled(false)
    , prevent_enter_autonomous_mode(false)
    , warn_driver_only(false)  {
    }
  FaultActionsReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , autonomous_disabled_no_brakes(false)
    , autonomous_disabled_apply_brakes(false)
    , can_gateway_disabled(false)
    , inverter_contactor_disabled(false)
    , prevent_enter_autonomous_mode(false)
    , warn_driver_only(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _autonomous_disabled_no_brakes_type;
  _autonomous_disabled_no_brakes_type autonomous_disabled_no_brakes;

   typedef uint8_t _autonomous_disabled_apply_brakes_type;
  _autonomous_disabled_apply_brakes_type autonomous_disabled_apply_brakes;

   typedef uint8_t _can_gateway_disabled_type;
  _can_gateway_disabled_type can_gateway_disabled;

   typedef uint8_t _inverter_contactor_disabled_type;
  _inverter_contactor_disabled_type inverter_contactor_disabled;

   typedef uint8_t _prevent_enter_autonomous_mode_type;
  _prevent_enter_autonomous_mode_type prevent_enter_autonomous_mode;

   typedef uint8_t _warn_driver_only_type;
  _warn_driver_only_type warn_driver_only;





  typedef boost::shared_ptr< ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator> const> ConstPtr;

}; // struct FaultActionsReport_

typedef ::raptor_dbw_msgs::FaultActionsReport_<std::allocator<void> > FaultActionsReport;

typedef boost::shared_ptr< ::raptor_dbw_msgs::FaultActionsReport > FaultActionsReportPtr;
typedef boost::shared_ptr< ::raptor_dbw_msgs::FaultActionsReport const> FaultActionsReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.autonomous_disabled_no_brakes == rhs.autonomous_disabled_no_brakes &&
    lhs.autonomous_disabled_apply_brakes == rhs.autonomous_disabled_apply_brakes &&
    lhs.can_gateway_disabled == rhs.can_gateway_disabled &&
    lhs.inverter_contactor_disabled == rhs.inverter_contactor_disabled &&
    lhs.prevent_enter_autonomous_mode == rhs.prevent_enter_autonomous_mode &&
    lhs.warn_driver_only == rhs.warn_driver_only;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace raptor_dbw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01de9bc391b21fe215ee7cfdd1f13e1f";
  }

  static const char* value(const ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01de9bc391b21fe2ULL;
  static const uint64_t static_value2 = 0x15ee7cfdd1f13e1fULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raptor_dbw_msgs/FaultActionsReport";
  }

  static const char* value(const ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"bool autonomous_disabled_no_brakes \n"
"bool autonomous_disabled_apply_brakes \n"
"bool can_gateway_disabled \n"
"bool inverter_contactor_disabled \n"
"bool prevent_enter_autonomous_mode \n"
"bool warn_driver_only \n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.autonomous_disabled_no_brakes);
      stream.next(m.autonomous_disabled_apply_brakes);
      stream.next(m.can_gateway_disabled);
      stream.next(m.inverter_contactor_disabled);
      stream.next(m.prevent_enter_autonomous_mode);
      stream.next(m.warn_driver_only);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaultActionsReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raptor_dbw_msgs::FaultActionsReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "autonomous_disabled_no_brakes: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.autonomous_disabled_no_brakes);
    s << indent << "autonomous_disabled_apply_brakes: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.autonomous_disabled_apply_brakes);
    s << indent << "can_gateway_disabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.can_gateway_disabled);
    s << indent << "inverter_contactor_disabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inverter_contactor_disabled);
    s << indent << "prevent_enter_autonomous_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.prevent_enter_autonomous_mode);
    s << indent << "warn_driver_only: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.warn_driver_only);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAPTOR_DBW_MSGS_MESSAGE_FAULTACTIONSREPORT_H
