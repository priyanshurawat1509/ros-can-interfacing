// Generated by gencpp from file pdu_msgs/RelayCommand.msg
// DO NOT EDIT!


#ifndef PDU_MSGS_MESSAGE_RELAYCOMMAND_H
#define PDU_MSGS_MESSAGE_RELAYCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pdu_msgs/RelayState.h>
#include <pdu_msgs/RelayState.h>
#include <pdu_msgs/RelayState.h>
#include <pdu_msgs/RelayState.h>
#include <pdu_msgs/RelayState.h>
#include <pdu_msgs/RelayState.h>
#include <pdu_msgs/RelayState.h>
#include <pdu_msgs/RelayState.h>

namespace pdu_msgs
{
template <class ContainerAllocator>
struct RelayCommand_
{
  typedef RelayCommand_<ContainerAllocator> Type;

  RelayCommand_()
    : relay_1()
    , relay_2()
    , relay_3()
    , relay_4()
    , relay_5()
    , relay_6()
    , relay_7()
    , relay_8()  {
    }
  RelayCommand_(const ContainerAllocator& _alloc)
    : relay_1(_alloc)
    , relay_2(_alloc)
    , relay_3(_alloc)
    , relay_4(_alloc)
    , relay_5(_alloc)
    , relay_6(_alloc)
    , relay_7(_alloc)
    , relay_8(_alloc)  {
  (void)_alloc;
    }



   typedef  ::pdu_msgs::RelayState_<ContainerAllocator>  _relay_1_type;
  _relay_1_type relay_1;

   typedef  ::pdu_msgs::RelayState_<ContainerAllocator>  _relay_2_type;
  _relay_2_type relay_2;

   typedef  ::pdu_msgs::RelayState_<ContainerAllocator>  _relay_3_type;
  _relay_3_type relay_3;

   typedef  ::pdu_msgs::RelayState_<ContainerAllocator>  _relay_4_type;
  _relay_4_type relay_4;

   typedef  ::pdu_msgs::RelayState_<ContainerAllocator>  _relay_5_type;
  _relay_5_type relay_5;

   typedef  ::pdu_msgs::RelayState_<ContainerAllocator>  _relay_6_type;
  _relay_6_type relay_6;

   typedef  ::pdu_msgs::RelayState_<ContainerAllocator>  _relay_7_type;
  _relay_7_type relay_7;

   typedef  ::pdu_msgs::RelayState_<ContainerAllocator>  _relay_8_type;
  _relay_8_type relay_8;





  typedef boost::shared_ptr< ::pdu_msgs::RelayCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pdu_msgs::RelayCommand_<ContainerAllocator> const> ConstPtr;

}; // struct RelayCommand_

typedef ::pdu_msgs::RelayCommand_<std::allocator<void> > RelayCommand;

typedef boost::shared_ptr< ::pdu_msgs::RelayCommand > RelayCommandPtr;
typedef boost::shared_ptr< ::pdu_msgs::RelayCommand const> RelayCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pdu_msgs::RelayCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pdu_msgs::RelayCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pdu_msgs::RelayCommand_<ContainerAllocator1> & lhs, const ::pdu_msgs::RelayCommand_<ContainerAllocator2> & rhs)
{
  return lhs.relay_1 == rhs.relay_1 &&
    lhs.relay_2 == rhs.relay_2 &&
    lhs.relay_3 == rhs.relay_3 &&
    lhs.relay_4 == rhs.relay_4 &&
    lhs.relay_5 == rhs.relay_5 &&
    lhs.relay_6 == rhs.relay_6 &&
    lhs.relay_7 == rhs.relay_7 &&
    lhs.relay_8 == rhs.relay_8;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pdu_msgs::RelayCommand_<ContainerAllocator1> & lhs, const ::pdu_msgs::RelayCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pdu_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pdu_msgs::RelayCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pdu_msgs::RelayCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pdu_msgs::RelayCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pdu_msgs::RelayCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pdu_msgs::RelayCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pdu_msgs::RelayCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pdu_msgs::RelayCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2244ce8be7c2912abb85c303db68d2b3";
  }

  static const char* value(const ::pdu_msgs::RelayCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2244ce8be7c2912aULL;
  static const uint64_t static_value2 = 0xbb85c303db68d2b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::pdu_msgs::RelayCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pdu_msgs/RelayCommand";
  }

  static const char* value(const ::pdu_msgs::RelayCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pdu_msgs::RelayCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Relay state enumerations\n"
"\n"
"RelayState relay_1\n"
"RelayState relay_2\n"
"RelayState relay_3\n"
"RelayState relay_4\n"
"RelayState relay_5\n"
"RelayState relay_6\n"
"RelayState relay_7\n"
"RelayState relay_8\n"
"\n"
"================================================================================\n"
"MSG: pdu_msgs/RelayState\n"
"uint8 value\n"
"\n"
"# MAINTAIN_STATE items perform the same function.\n"
"uint8 RELAY_OFF = 0\n"
"uint8 RELAY_ON = 1\n"
"uint8 MAINTAIN_STATE = 2\n"
;
  }

  static const char* value(const ::pdu_msgs::RelayCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pdu_msgs::RelayCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.relay_1);
      stream.next(m.relay_2);
      stream.next(m.relay_3);
      stream.next(m.relay_4);
      stream.next(m.relay_5);
      stream.next(m.relay_6);
      stream.next(m.relay_7);
      stream.next(m.relay_8);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RelayCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pdu_msgs::RelayCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pdu_msgs::RelayCommand_<ContainerAllocator>& v)
  {
    s << indent << "relay_1: ";
    s << std::endl;
    Printer< ::pdu_msgs::RelayState_<ContainerAllocator> >::stream(s, indent + "  ", v.relay_1);
    s << indent << "relay_2: ";
    s << std::endl;
    Printer< ::pdu_msgs::RelayState_<ContainerAllocator> >::stream(s, indent + "  ", v.relay_2);
    s << indent << "relay_3: ";
    s << std::endl;
    Printer< ::pdu_msgs::RelayState_<ContainerAllocator> >::stream(s, indent + "  ", v.relay_3);
    s << indent << "relay_4: ";
    s << std::endl;
    Printer< ::pdu_msgs::RelayState_<ContainerAllocator> >::stream(s, indent + "  ", v.relay_4);
    s << indent << "relay_5: ";
    s << std::endl;
    Printer< ::pdu_msgs::RelayState_<ContainerAllocator> >::stream(s, indent + "  ", v.relay_5);
    s << indent << "relay_6: ";
    s << std::endl;
    Printer< ::pdu_msgs::RelayState_<ContainerAllocator> >::stream(s, indent + "  ", v.relay_6);
    s << indent << "relay_7: ";
    s << std::endl;
    Printer< ::pdu_msgs::RelayState_<ContainerAllocator> >::stream(s, indent + "  ", v.relay_7);
    s << indent << "relay_8: ";
    s << std::endl;
    Printer< ::pdu_msgs::RelayState_<ContainerAllocator> >::stream(s, indent + "  ", v.relay_8);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PDU_MSGS_MESSAGE_RELAYCOMMAND_H
