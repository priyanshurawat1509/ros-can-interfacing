# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from raptor_dbw_msgs/BrakeReport.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import raptor_dbw_msgs.msg
import std_msgs.msg

class BrakeReport(genpy.Message):
  _md5sum = "bd5e570d32b81ff2e399ae9770d32e16"
  _type = "raptor_dbw_msgs/BrakeReport"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

# Brake pedal (%)
float32 pedal_position
float32 pedal_output

# Status
bool enabled  # Enabled
bool driver_activity   # Driver activity

bool fault_brake_system

# Faults
bool fault_ch1
bool fault_ch2

uint8 rolling_counter

float32 brake_torque_actual # 0 to 100%

# Anti-lock Brakes and  Stability Control
bool intervention_active
bool intervention_ready

# Parking Brake
ParkingBrake parking_brake

ActuatorControlMode control_type

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: raptor_dbw_msgs/ParkingBrake
uint8 status

uint8 OFF=0
uint8 TRANS=1
uint8 ON=2
uint8 FAULT=3

================================================================================
MSG: raptor_dbw_msgs/ActuatorControlMode
uint8 value

uint8 open_loop = 0
uint8 closed_loop_actuator = 1
uint8 closed_loop_vehicle = 2
uint8 none = 255"""
  __slots__ = ['header','pedal_position','pedal_output','enabled','driver_activity','fault_brake_system','fault_ch1','fault_ch2','rolling_counter','brake_torque_actual','intervention_active','intervention_ready','parking_brake','control_type']
  _slot_types = ['std_msgs/Header','float32','float32','bool','bool','bool','bool','bool','uint8','float32','bool','bool','raptor_dbw_msgs/ParkingBrake','raptor_dbw_msgs/ActuatorControlMode']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,pedal_position,pedal_output,enabled,driver_activity,fault_brake_system,fault_ch1,fault_ch2,rolling_counter,brake_torque_actual,intervention_active,intervention_ready,parking_brake,control_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BrakeReport, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pedal_position is None:
        self.pedal_position = 0.
      if self.pedal_output is None:
        self.pedal_output = 0.
      if self.enabled is None:
        self.enabled = False
      if self.driver_activity is None:
        self.driver_activity = False
      if self.fault_brake_system is None:
        self.fault_brake_system = False
      if self.fault_ch1 is None:
        self.fault_ch1 = False
      if self.fault_ch2 is None:
        self.fault_ch2 = False
      if self.rolling_counter is None:
        self.rolling_counter = 0
      if self.brake_torque_actual is None:
        self.brake_torque_actual = 0.
      if self.intervention_active is None:
        self.intervention_active = False
      if self.intervention_ready is None:
        self.intervention_ready = False
      if self.parking_brake is None:
        self.parking_brake = raptor_dbw_msgs.msg.ParkingBrake()
      if self.control_type is None:
        self.control_type = raptor_dbw_msgs.msg.ActuatorControlMode()
    else:
      self.header = std_msgs.msg.Header()
      self.pedal_position = 0.
      self.pedal_output = 0.
      self.enabled = False
      self.driver_activity = False
      self.fault_brake_system = False
      self.fault_ch1 = False
      self.fault_ch2 = False
      self.rolling_counter = 0
      self.brake_torque_actual = 0.
      self.intervention_active = False
      self.intervention_ready = False
      self.parking_brake = raptor_dbw_msgs.msg.ParkingBrake()
      self.control_type = raptor_dbw_msgs.msg.ActuatorControlMode()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f6Bf4B().pack(_x.pedal_position, _x.pedal_output, _x.enabled, _x.driver_activity, _x.fault_brake_system, _x.fault_ch1, _x.fault_ch2, _x.rolling_counter, _x.brake_torque_actual, _x.intervention_active, _x.intervention_ready, _x.parking_brake.status, _x.control_type.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.parking_brake is None:
        self.parking_brake = raptor_dbw_msgs.msg.ParkingBrake()
      if self.control_type is None:
        self.control_type = raptor_dbw_msgs.msg.ActuatorControlMode()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.pedal_position, _x.pedal_output, _x.enabled, _x.driver_activity, _x.fault_brake_system, _x.fault_ch1, _x.fault_ch2, _x.rolling_counter, _x.brake_torque_actual, _x.intervention_active, _x.intervention_ready, _x.parking_brake.status, _x.control_type.value,) = _get_struct_2f6Bf4B().unpack(str[start:end])
      self.enabled = bool(self.enabled)
      self.driver_activity = bool(self.driver_activity)
      self.fault_brake_system = bool(self.fault_brake_system)
      self.fault_ch1 = bool(self.fault_ch1)
      self.fault_ch2 = bool(self.fault_ch2)
      self.intervention_active = bool(self.intervention_active)
      self.intervention_ready = bool(self.intervention_ready)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f6Bf4B().pack(_x.pedal_position, _x.pedal_output, _x.enabled, _x.driver_activity, _x.fault_brake_system, _x.fault_ch1, _x.fault_ch2, _x.rolling_counter, _x.brake_torque_actual, _x.intervention_active, _x.intervention_ready, _x.parking_brake.status, _x.control_type.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.parking_brake is None:
        self.parking_brake = raptor_dbw_msgs.msg.ParkingBrake()
      if self.control_type is None:
        self.control_type = raptor_dbw_msgs.msg.ActuatorControlMode()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.pedal_position, _x.pedal_output, _x.enabled, _x.driver_activity, _x.fault_brake_system, _x.fault_ch1, _x.fault_ch2, _x.rolling_counter, _x.brake_torque_actual, _x.intervention_active, _x.intervention_ready, _x.parking_brake.status, _x.control_type.value,) = _get_struct_2f6Bf4B().unpack(str[start:end])
      self.enabled = bool(self.enabled)
      self.driver_activity = bool(self.driver_activity)
      self.fault_brake_system = bool(self.fault_brake_system)
      self.fault_ch1 = bool(self.fault_ch1)
      self.fault_ch2 = bool(self.fault_ch2)
      self.intervention_active = bool(self.intervention_active)
      self.intervention_ready = bool(self.intervention_ready)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f6Bf4B = None
def _get_struct_2f6Bf4B():
    global _struct_2f6Bf4B
    if _struct_2f6Bf4B is None:
        _struct_2f6Bf4B = struct.Struct("<2f6Bf4B")
    return _struct_2f6Bf4B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
