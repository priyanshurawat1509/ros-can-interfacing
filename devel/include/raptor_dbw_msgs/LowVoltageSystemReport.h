// Generated by gencpp from file raptor_dbw_msgs/LowVoltageSystemReport.msg
// DO NOT EDIT!


#ifndef RAPTOR_DBW_MSGS_MESSAGE_LOWVOLTAGESYSTEMREPORT_H
#define RAPTOR_DBW_MSGS_MESSAGE_LOWVOLTAGESYSTEMREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace raptor_dbw_msgs
{
template <class ContainerAllocator>
struct LowVoltageSystemReport_
{
  typedef LowVoltageSystemReport_<ContainerAllocator> Type;

  LowVoltageSystemReport_()
    : header()
    , dbw_battery_volts(0.0)
    , vehicle_battery_volts(0.0)
    , vehicle_battery_current(0.0)
    , vehicle_alternator_current(0.0)
    , dcdc_current(0.0)
    , alternator_current(0.0)
    , aux_inverter_contactor(false)  {
    }
  LowVoltageSystemReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , dbw_battery_volts(0.0)
    , vehicle_battery_volts(0.0)
    , vehicle_battery_current(0.0)
    , vehicle_alternator_current(0.0)
    , dcdc_current(0.0)
    , alternator_current(0.0)
    , aux_inverter_contactor(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _dbw_battery_volts_type;
  _dbw_battery_volts_type dbw_battery_volts;

   typedef float _vehicle_battery_volts_type;
  _vehicle_battery_volts_type vehicle_battery_volts;

   typedef float _vehicle_battery_current_type;
  _vehicle_battery_current_type vehicle_battery_current;

   typedef float _vehicle_alternator_current_type;
  _vehicle_alternator_current_type vehicle_alternator_current;

   typedef float _dcdc_current_type;
  _dcdc_current_type dcdc_current;

   typedef float _alternator_current_type;
  _alternator_current_type alternator_current;

   typedef uint8_t _aux_inverter_contactor_type;
  _aux_inverter_contactor_type aux_inverter_contactor;





  typedef boost::shared_ptr< ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator> const> ConstPtr;

}; // struct LowVoltageSystemReport_

typedef ::raptor_dbw_msgs::LowVoltageSystemReport_<std::allocator<void> > LowVoltageSystemReport;

typedef boost::shared_ptr< ::raptor_dbw_msgs::LowVoltageSystemReport > LowVoltageSystemReportPtr;
typedef boost::shared_ptr< ::raptor_dbw_msgs::LowVoltageSystemReport const> LowVoltageSystemReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.dbw_battery_volts == rhs.dbw_battery_volts &&
    lhs.vehicle_battery_volts == rhs.vehicle_battery_volts &&
    lhs.vehicle_battery_current == rhs.vehicle_battery_current &&
    lhs.vehicle_alternator_current == rhs.vehicle_alternator_current &&
    lhs.dcdc_current == rhs.dcdc_current &&
    lhs.alternator_current == rhs.alternator_current &&
    lhs.aux_inverter_contactor == rhs.aux_inverter_contactor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace raptor_dbw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "28b554dae7562a7965fba8e1854ba489";
  }

  static const char* value(const ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x28b554dae7562a79ULL;
  static const uint64_t static_value2 = 0x65fba8e1854ba489ULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raptor_dbw_msgs/LowVoltageSystemReport";
  }

  static const char* value(const ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float32 dbw_battery_volts # Volts\n"
"float32 vehicle_battery_volts # Volts \n"
"float32 vehicle_battery_current # Amps\n"
"float32 vehicle_alternator_current #Amps\n"
"\n"
"float32 dcdc_current # Amps\n"
"float32 alternator_current # Amps\n"
"\n"
"bool aux_inverter_contactor # On/Off\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.dbw_battery_volts);
      stream.next(m.vehicle_battery_volts);
      stream.next(m.vehicle_battery_current);
      stream.next(m.vehicle_alternator_current);
      stream.next(m.dcdc_current);
      stream.next(m.alternator_current);
      stream.next(m.aux_inverter_contactor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LowVoltageSystemReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raptor_dbw_msgs::LowVoltageSystemReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "dbw_battery_volts: ";
    Printer<float>::stream(s, indent + "  ", v.dbw_battery_volts);
    s << indent << "vehicle_battery_volts: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_battery_volts);
    s << indent << "vehicle_battery_current: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_battery_current);
    s << indent << "vehicle_alternator_current: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_alternator_current);
    s << indent << "dcdc_current: ";
    Printer<float>::stream(s, indent + "  ", v.dcdc_current);
    s << indent << "alternator_current: ";
    Printer<float>::stream(s, indent + "  ", v.alternator_current);
    s << indent << "aux_inverter_contactor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.aux_inverter_contactor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAPTOR_DBW_MSGS_MESSAGE_LOWVOLTAGESYSTEMREPORT_H
