// Generated by gencpp from file raptor_dbw_msgs/GearReport.msg
// DO NOT EDIT!


#ifndef RAPTOR_DBW_MSGS_MESSAGE_GEARREPORT_H
#define RAPTOR_DBW_MSGS_MESSAGE_GEARREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <raptor_dbw_msgs/Gear.h>

namespace raptor_dbw_msgs
{
template <class ContainerAllocator>
struct GearReport_
{
  typedef GearReport_<ContainerAllocator> Type;

  GearReport_()
    : header()
    , state()
    , reject(false)
    , driver_activity(false)
    , enabled(false)
    , gear_select_system_fault(false)  {
    }
  GearReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(_alloc)
    , reject(false)
    , driver_activity(false)
    , enabled(false)
    , gear_select_system_fault(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::raptor_dbw_msgs::Gear_<ContainerAllocator>  _state_type;
  _state_type state;

   typedef uint8_t _reject_type;
  _reject_type reject;

   typedef uint8_t _driver_activity_type;
  _driver_activity_type driver_activity;

   typedef uint8_t _enabled_type;
  _enabled_type enabled;

   typedef uint8_t _gear_select_system_fault_type;
  _gear_select_system_fault_type gear_select_system_fault;





  typedef boost::shared_ptr< ::raptor_dbw_msgs::GearReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor_dbw_msgs::GearReport_<ContainerAllocator> const> ConstPtr;

}; // struct GearReport_

typedef ::raptor_dbw_msgs::GearReport_<std::allocator<void> > GearReport;

typedef boost::shared_ptr< ::raptor_dbw_msgs::GearReport > GearReportPtr;
typedef boost::shared_ptr< ::raptor_dbw_msgs::GearReport const> GearReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raptor_dbw_msgs::GearReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raptor_dbw_msgs::GearReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::raptor_dbw_msgs::GearReport_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::GearReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.state == rhs.state &&
    lhs.reject == rhs.reject &&
    lhs.driver_activity == rhs.driver_activity &&
    lhs.enabled == rhs.enabled &&
    lhs.gear_select_system_fault == rhs.gear_select_system_fault;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::raptor_dbw_msgs::GearReport_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::GearReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace raptor_dbw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::GearReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::GearReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::GearReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::GearReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::GearReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::GearReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raptor_dbw_msgs::GearReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58fab7f1901e8cb7a5ef240558513b10";
  }

  static const char* value(const ::raptor_dbw_msgs::GearReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58fab7f1901e8cb7ULL;
  static const uint64_t static_value2 = 0xa5ef240558513b10ULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor_dbw_msgs::GearReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raptor_dbw_msgs/GearReport";
  }

  static const char* value(const ::raptor_dbw_msgs::GearReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raptor_dbw_msgs::GearReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# Current gear enumeration\n"
"Gear state\n"
"\n"
"# Gear reject flag\n"
"bool reject\n"
"\n"
"# Status\n"
"bool driver_activity\n"
"bool enabled\n"
"\n"
"# Faults\n"
"bool gear_select_system_fault\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: raptor_dbw_msgs/Gear\n"
"uint8 gear\n"
"\n"
"uint8 NONE=0\n"
"uint8 PARK=1\n"
"uint8 REVERSE=2\n"
"uint8 NEUTRAL=3\n"
"uint8 DRIVE=4\n"
"uint8 LOW=5\n"
;
  }

  static const char* value(const ::raptor_dbw_msgs::GearReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raptor_dbw_msgs::GearReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
      stream.next(m.reject);
      stream.next(m.driver_activity);
      stream.next(m.enabled);
      stream.next(m.gear_select_system_fault);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GearReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raptor_dbw_msgs::GearReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raptor_dbw_msgs::GearReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::Gear_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
    s << indent << "reject: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reject);
    s << indent << "driver_activity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.driver_activity);
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
    s << indent << "gear_select_system_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear_select_system_fault);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAPTOR_DBW_MSGS_MESSAGE_GEARREPORT_H
