// Generated by gencpp from file raptor_dbw_msgs/MiscCmd.msg
// DO NOT EDIT!


#ifndef RAPTOR_DBW_MSGS_MESSAGE_MISCCMD_H
#define RAPTOR_DBW_MSGS_MESSAGE_MISCCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <raptor_dbw_msgs/TurnSignal.h>
#include <raptor_dbw_msgs/DoorRequest.h>
#include <raptor_dbw_msgs/HighBeam.h>
#include <raptor_dbw_msgs/WiperFront.h>
#include <raptor_dbw_msgs/WiperRear.h>
#include <raptor_dbw_msgs/Ignition.h>
#include <raptor_dbw_msgs/DoorRequest.h>
#include <raptor_dbw_msgs/DoorRequest.h>
#include <raptor_dbw_msgs/LowBeam.h>

namespace raptor_dbw_msgs
{
template <class ContainerAllocator>
struct MiscCmd_
{
  typedef MiscCmd_<ContainerAllocator> Type;

  MiscCmd_()
    : cmd()
    , door_request_right_rear()
    , rolling_counter(0)
    , high_beam_cmd()
    , front_wiper_cmd()
    , rear_wiper_cmd()
    , ignition_cmd()
    , door_request_left_rear()
    , door_request_lift_gate()
    , block_standard_cruise_buttons(false)
    , block_adaptive_cruise_buttons(false)
    , block_turn_signal_stalk(false)
    , horn_cmd(false)
    , low_beam_cmd()  {
    }
  MiscCmd_(const ContainerAllocator& _alloc)
    : cmd(_alloc)
    , door_request_right_rear(_alloc)
    , rolling_counter(0)
    , high_beam_cmd(_alloc)
    , front_wiper_cmd(_alloc)
    , rear_wiper_cmd(_alloc)
    , ignition_cmd(_alloc)
    , door_request_left_rear(_alloc)
    , door_request_lift_gate(_alloc)
    , block_standard_cruise_buttons(false)
    , block_adaptive_cruise_buttons(false)
    , block_turn_signal_stalk(false)
    , horn_cmd(false)
    , low_beam_cmd(_alloc)  {
  (void)_alloc;
    }



   typedef  ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator>  _cmd_type;
  _cmd_type cmd;

   typedef  ::raptor_dbw_msgs::DoorRequest_<ContainerAllocator>  _door_request_right_rear_type;
  _door_request_right_rear_type door_request_right_rear;

   typedef uint8_t _rolling_counter_type;
  _rolling_counter_type rolling_counter;

   typedef  ::raptor_dbw_msgs::HighBeam_<ContainerAllocator>  _high_beam_cmd_type;
  _high_beam_cmd_type high_beam_cmd;

   typedef  ::raptor_dbw_msgs::WiperFront_<ContainerAllocator>  _front_wiper_cmd_type;
  _front_wiper_cmd_type front_wiper_cmd;

   typedef  ::raptor_dbw_msgs::WiperRear_<ContainerAllocator>  _rear_wiper_cmd_type;
  _rear_wiper_cmd_type rear_wiper_cmd;

   typedef  ::raptor_dbw_msgs::Ignition_<ContainerAllocator>  _ignition_cmd_type;
  _ignition_cmd_type ignition_cmd;

   typedef  ::raptor_dbw_msgs::DoorRequest_<ContainerAllocator>  _door_request_left_rear_type;
  _door_request_left_rear_type door_request_left_rear;

   typedef  ::raptor_dbw_msgs::DoorRequest_<ContainerAllocator>  _door_request_lift_gate_type;
  _door_request_lift_gate_type door_request_lift_gate;

   typedef uint8_t _block_standard_cruise_buttons_type;
  _block_standard_cruise_buttons_type block_standard_cruise_buttons;

   typedef uint8_t _block_adaptive_cruise_buttons_type;
  _block_adaptive_cruise_buttons_type block_adaptive_cruise_buttons;

   typedef uint8_t _block_turn_signal_stalk_type;
  _block_turn_signal_stalk_type block_turn_signal_stalk;

   typedef uint8_t _horn_cmd_type;
  _horn_cmd_type horn_cmd;

   typedef  ::raptor_dbw_msgs::LowBeam_<ContainerAllocator>  _low_beam_cmd_type;
  _low_beam_cmd_type low_beam_cmd;





  typedef boost::shared_ptr< ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator> const> ConstPtr;

}; // struct MiscCmd_

typedef ::raptor_dbw_msgs::MiscCmd_<std::allocator<void> > MiscCmd;

typedef boost::shared_ptr< ::raptor_dbw_msgs::MiscCmd > MiscCmdPtr;
typedef boost::shared_ptr< ::raptor_dbw_msgs::MiscCmd const> MiscCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd &&
    lhs.door_request_right_rear == rhs.door_request_right_rear &&
    lhs.rolling_counter == rhs.rolling_counter &&
    lhs.high_beam_cmd == rhs.high_beam_cmd &&
    lhs.front_wiper_cmd == rhs.front_wiper_cmd &&
    lhs.rear_wiper_cmd == rhs.rear_wiper_cmd &&
    lhs.ignition_cmd == rhs.ignition_cmd &&
    lhs.door_request_left_rear == rhs.door_request_left_rear &&
    lhs.door_request_lift_gate == rhs.door_request_lift_gate &&
    lhs.block_standard_cruise_buttons == rhs.block_standard_cruise_buttons &&
    lhs.block_adaptive_cruise_buttons == rhs.block_adaptive_cruise_buttons &&
    lhs.block_turn_signal_stalk == rhs.block_turn_signal_stalk &&
    lhs.horn_cmd == rhs.horn_cmd &&
    lhs.low_beam_cmd == rhs.low_beam_cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace raptor_dbw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1267e40afe4289757af3bbfb5a1352fe";
  }

  static const char* value(const ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1267e40afe428975ULL;
  static const uint64_t static_value2 = 0x7af3bbfb5a1352feULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raptor_dbw_msgs/MiscCmd";
  }

  static const char* value(const ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Turn signal command enumeration\n"
"TurnSignal cmd\n"
"\n"
"DoorRequest door_request_right_rear\n"
"\n"
"uint8 rolling_counter\n"
"\n"
"HighBeam high_beam_cmd\n"
"\n"
"WiperFront front_wiper_cmd\n"
"\n"
"WiperRear rear_wiper_cmd\n"
"\n"
"Ignition ignition_cmd\n"
"DoorRequest door_request_left_rear\n"
"DoorRequest door_request_lift_gate\n"
"\n"
"bool block_standard_cruise_buttons\n"
"bool block_adaptive_cruise_buttons\n"
"bool block_turn_signal_stalk\n"
"\n"
"bool horn_cmd\n"
"\n"
"LowBeam low_beam_cmd\n"
"\n"
"================================================================================\n"
"MSG: raptor_dbw_msgs/TurnSignal\n"
"uint8 value\n"
"\n"
"uint8 NONE = 0\n"
"uint8 LEFT = 1\n"
"uint8 RIGHT = 2\n"
"uint8 HAZARDS = 3\n"
"uint8 SNA = 7\n"
"================================================================================\n"
"MSG: raptor_dbw_msgs/DoorRequest\n"
"uint8 value\n"
"\n"
"uint8 NO_REQUEST=0\n"
"uint8 LIFTGATE_TOGGLE=1\n"
"uint8 LR_DOOR_TOGGLE=2\n"
"uint8 RR_DOOR_TOGGLE=3\n"
"================================================================================\n"
"MSG: raptor_dbw_msgs/HighBeam\n"
"uint8 status\n"
"\n"
"uint8 OFF = 0\n"
"uint8 ON = 1\n"
"uint8 FORCE_ON = 2\n"
"uint8 RESERVED = 3\n"
"\n"
"================================================================================\n"
"MSG: raptor_dbw_msgs/WiperFront\n"
"uint8 status\n"
"\n"
"uint8 OFF = 0\n"
"uint8 INTERVAL_1 = 1\n"
"uint8 INTERVAL_2 = 2\n"
"uint8 INTERVAL_3 = 3\n"
"uint8 INTERVAL_4 = 4\n"
"uint8 INTERVAL_5 = 5\n"
"uint8 INTERVAL_6 = 6\n"
"uint8 CONSTANT_LOW = 11\n"
"uint8 CONSTANT_HIGH = 12\n"
"uint8 WASH_BRIEF = 13\n"
"uint8 WASH_CONTINUOUS = 14\n"
"uint8 SNA = 15\n"
"================================================================================\n"
"MSG: raptor_dbw_msgs/WiperRear\n"
"uint8 status\n"
"\n"
"uint8 OFF = 0\n"
"uint8 INTERVAL_1 = 1\n"
"uint8 CONSTANT_LOW = 11\n"
"uint8 CONSTANT_HIGH = 12\n"
"uint8 WASH_BRIEF = 13\n"
"uint8 WASH_CONTINUOUS = 14\n"
"uint8 SNA = 15\n"
"================================================================================\n"
"MSG: raptor_dbw_msgs/Ignition\n"
"uint8 status\n"
"\n"
"uint8 NO_REQUEST = 0\n"
"uint8 FORCE_OFF = 1\n"
"uint8 ACCESSORY = 2\n"
"uint8 RUN = 3\n"
"uint8 CRANK = 4\n"
"================================================================================\n"
"MSG: raptor_dbw_msgs/LowBeam\n"
"uint8 status\n"
"\n"
"uint8 OFF = 0\n"
"uint8 RESERVED = 1\n"
"uint8 ON = 2\n"
"uint8 RESERVED_1 = 3\n"
;
  }

  static const char* value(const ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.door_request_right_rear);
      stream.next(m.rolling_counter);
      stream.next(m.high_beam_cmd);
      stream.next(m.front_wiper_cmd);
      stream.next(m.rear_wiper_cmd);
      stream.next(m.ignition_cmd);
      stream.next(m.door_request_left_rear);
      stream.next(m.door_request_lift_gate);
      stream.next(m.block_standard_cruise_buttons);
      stream.next(m.block_adaptive_cruise_buttons);
      stream.next(m.block_turn_signal_stalk);
      stream.next(m.horn_cmd);
      stream.next(m.low_beam_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MiscCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raptor_dbw_msgs::MiscCmd_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator> >::stream(s, indent + "  ", v.cmd);
    s << indent << "door_request_right_rear: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::DoorRequest_<ContainerAllocator> >::stream(s, indent + "  ", v.door_request_right_rear);
    s << indent << "rolling_counter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rolling_counter);
    s << indent << "high_beam_cmd: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::HighBeam_<ContainerAllocator> >::stream(s, indent + "  ", v.high_beam_cmd);
    s << indent << "front_wiper_cmd: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::WiperFront_<ContainerAllocator> >::stream(s, indent + "  ", v.front_wiper_cmd);
    s << indent << "rear_wiper_cmd: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::WiperRear_<ContainerAllocator> >::stream(s, indent + "  ", v.rear_wiper_cmd);
    s << indent << "ignition_cmd: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::Ignition_<ContainerAllocator> >::stream(s, indent + "  ", v.ignition_cmd);
    s << indent << "door_request_left_rear: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::DoorRequest_<ContainerAllocator> >::stream(s, indent + "  ", v.door_request_left_rear);
    s << indent << "door_request_lift_gate: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::DoorRequest_<ContainerAllocator> >::stream(s, indent + "  ", v.door_request_lift_gate);
    s << indent << "block_standard_cruise_buttons: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.block_standard_cruise_buttons);
    s << indent << "block_adaptive_cruise_buttons: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.block_adaptive_cruise_buttons);
    s << indent << "block_turn_signal_stalk: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.block_turn_signal_stalk);
    s << indent << "horn_cmd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.horn_cmd);
    s << indent << "low_beam_cmd: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::LowBeam_<ContainerAllocator> >::stream(s, indent + "  ", v.low_beam_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAPTOR_DBW_MSGS_MESSAGE_MISCCMD_H
