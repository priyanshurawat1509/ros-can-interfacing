# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pdu_msgs/RelayReport.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pdu_msgs.msg
import std_msgs.msg

class RelayReport(genpy.Message):
  _md5sum = "5013cdfb5b7f5657dbdcb6339106d711"
  _type = "pdu_msgs/RelayReport"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

# Fuse status enumeration
uint8 GridAddress

RelayStatus relay_1
RelayStatus relay_2
RelayStatus relay_3
RelayStatus relay_4
RelayStatus relay_5
RelayStatus relay_6
RelayStatus relay_7
RelayStatus relay_8

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: pdu_msgs/RelayStatus
uint8 value

uint8 OK = 0
uint8 RELAY_COIL_OPEN = 1
uint8 RELAY_COIL_SHORTED = 2
uint8 NORM_OPEN_RELAY_OPEN = 3
uint8 NORM_CLOSED_RELAY_OPEN = 4
uint8 COIL_NOT_POWERED = 5
uint8 NORM_OPEN_RELAY_SHORTED = 6
uint8 NORM_CLOSED_RELAY_SHORTED = 7
uint8 RESERVED_01 = 8
uint8 RESERVED_02 = 9
uint8 RESERVED_03 = 10
uint8 HIGH_SIDE_FAULT = 11
uint8 HIGH_SIDE_OPEN_LOAD = 12
uint8 HIGH_SIDE_OVER_VOLTAGE = 13
uint8 RESERVED_04 = 14
uint8 RELAY_LOCATION_NOT_USED = 15
"""
  __slots__ = ['header','GridAddress','relay_1','relay_2','relay_3','relay_4','relay_5','relay_6','relay_7','relay_8']
  _slot_types = ['std_msgs/Header','uint8','pdu_msgs/RelayStatus','pdu_msgs/RelayStatus','pdu_msgs/RelayStatus','pdu_msgs/RelayStatus','pdu_msgs/RelayStatus','pdu_msgs/RelayStatus','pdu_msgs/RelayStatus','pdu_msgs/RelayStatus']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,GridAddress,relay_1,relay_2,relay_3,relay_4,relay_5,relay_6,relay_7,relay_8

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RelayReport, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.GridAddress is None:
        self.GridAddress = 0
      if self.relay_1 is None:
        self.relay_1 = pdu_msgs.msg.RelayStatus()
      if self.relay_2 is None:
        self.relay_2 = pdu_msgs.msg.RelayStatus()
      if self.relay_3 is None:
        self.relay_3 = pdu_msgs.msg.RelayStatus()
      if self.relay_4 is None:
        self.relay_4 = pdu_msgs.msg.RelayStatus()
      if self.relay_5 is None:
        self.relay_5 = pdu_msgs.msg.RelayStatus()
      if self.relay_6 is None:
        self.relay_6 = pdu_msgs.msg.RelayStatus()
      if self.relay_7 is None:
        self.relay_7 = pdu_msgs.msg.RelayStatus()
      if self.relay_8 is None:
        self.relay_8 = pdu_msgs.msg.RelayStatus()
    else:
      self.header = std_msgs.msg.Header()
      self.GridAddress = 0
      self.relay_1 = pdu_msgs.msg.RelayStatus()
      self.relay_2 = pdu_msgs.msg.RelayStatus()
      self.relay_3 = pdu_msgs.msg.RelayStatus()
      self.relay_4 = pdu_msgs.msg.RelayStatus()
      self.relay_5 = pdu_msgs.msg.RelayStatus()
      self.relay_6 = pdu_msgs.msg.RelayStatus()
      self.relay_7 = pdu_msgs.msg.RelayStatus()
      self.relay_8 = pdu_msgs.msg.RelayStatus()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9B().pack(_x.GridAddress, _x.relay_1.value, _x.relay_2.value, _x.relay_3.value, _x.relay_4.value, _x.relay_5.value, _x.relay_6.value, _x.relay_7.value, _x.relay_8.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.relay_1 is None:
        self.relay_1 = pdu_msgs.msg.RelayStatus()
      if self.relay_2 is None:
        self.relay_2 = pdu_msgs.msg.RelayStatus()
      if self.relay_3 is None:
        self.relay_3 = pdu_msgs.msg.RelayStatus()
      if self.relay_4 is None:
        self.relay_4 = pdu_msgs.msg.RelayStatus()
      if self.relay_5 is None:
        self.relay_5 = pdu_msgs.msg.RelayStatus()
      if self.relay_6 is None:
        self.relay_6 = pdu_msgs.msg.RelayStatus()
      if self.relay_7 is None:
        self.relay_7 = pdu_msgs.msg.RelayStatus()
      if self.relay_8 is None:
        self.relay_8 = pdu_msgs.msg.RelayStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.GridAddress, _x.relay_1.value, _x.relay_2.value, _x.relay_3.value, _x.relay_4.value, _x.relay_5.value, _x.relay_6.value, _x.relay_7.value, _x.relay_8.value,) = _get_struct_9B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9B().pack(_x.GridAddress, _x.relay_1.value, _x.relay_2.value, _x.relay_3.value, _x.relay_4.value, _x.relay_5.value, _x.relay_6.value, _x.relay_7.value, _x.relay_8.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.relay_1 is None:
        self.relay_1 = pdu_msgs.msg.RelayStatus()
      if self.relay_2 is None:
        self.relay_2 = pdu_msgs.msg.RelayStatus()
      if self.relay_3 is None:
        self.relay_3 = pdu_msgs.msg.RelayStatus()
      if self.relay_4 is None:
        self.relay_4 = pdu_msgs.msg.RelayStatus()
      if self.relay_5 is None:
        self.relay_5 = pdu_msgs.msg.RelayStatus()
      if self.relay_6 is None:
        self.relay_6 = pdu_msgs.msg.RelayStatus()
      if self.relay_7 is None:
        self.relay_7 = pdu_msgs.msg.RelayStatus()
      if self.relay_8 is None:
        self.relay_8 = pdu_msgs.msg.RelayStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.GridAddress, _x.relay_1.value, _x.relay_2.value, _x.relay_3.value, _x.relay_4.value, _x.relay_5.value, _x.relay_6.value, _x.relay_7.value, _x.relay_8.value,) = _get_struct_9B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_9B = None
def _get_struct_9B():
    global _struct_9B
    if _struct_9B is None:
        _struct_9B = struct.Struct("<9B")
    return _struct_9B
