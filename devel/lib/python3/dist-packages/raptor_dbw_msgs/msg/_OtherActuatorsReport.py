# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from raptor_dbw_msgs/OtherActuatorsReport.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import raptor_dbw_msgs.msg
import std_msgs.msg

class OtherActuatorsReport(genpy.Message):
  _md5sum = "2109072233b64ea71bab77b539413ada"
  _type = "raptor_dbw_msgs/OtherActuatorsReport"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

TurnSignal turn_signal_state 
DoorState right_rear_door_state 
HighBeamState high_beam_state 
WiperFront front_wiper_state 
WiperRear rear_wiper_state 
Ignition ignition_state 
DoorState left_rear_door_state 
DoorState liftgate_door_state 
HornState horn_state 
LowBeam low_beam_state 

uint8 rolling_counter

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: raptor_dbw_msgs/TurnSignal
uint8 value

uint8 NONE = 0
uint8 LEFT = 1
uint8 RIGHT = 2
uint8 HAZARDS = 3
uint8 SNA = 7
================================================================================
MSG: raptor_dbw_msgs/DoorState
uint8 value

uint8 UNDEFINED = 0
uint8 CLOSED = 1
uint8 OPEN = 2
uint8 SNA = 3

================================================================================
MSG: raptor_dbw_msgs/HighBeamState
uint8 value

uint8 SNA = 0
uint8 RESERVED = 1
uint8 ON = 2
uint8 OFF = 0
================================================================================
MSG: raptor_dbw_msgs/WiperFront
uint8 status

uint8 OFF = 0
uint8 INTERVAL_1 = 1
uint8 INTERVAL_2 = 2
uint8 INTERVAL_3 = 3
uint8 INTERVAL_4 = 4
uint8 INTERVAL_5 = 5
uint8 INTERVAL_6 = 6
uint8 CONSTANT_LOW = 11
uint8 CONSTANT_HIGH = 12
uint8 WASH_BRIEF = 13
uint8 WASH_CONTINUOUS = 14
uint8 SNA = 15
================================================================================
MSG: raptor_dbw_msgs/WiperRear
uint8 status

uint8 OFF = 0
uint8 INTERVAL_1 = 1
uint8 CONSTANT_LOW = 11
uint8 CONSTANT_HIGH = 12
uint8 WASH_BRIEF = 13
uint8 WASH_CONTINUOUS = 14
uint8 SNA = 15
================================================================================
MSG: raptor_dbw_msgs/Ignition
uint8 status

uint8 NO_REQUEST = 0
uint8 FORCE_OFF = 1
uint8 ACCESSORY = 2
uint8 RUN = 3
uint8 CRANK = 4
================================================================================
MSG: raptor_dbw_msgs/HornState
uint8 status

uint8 OFF = 0
uint8 ON = 1
uint8 SNA = 2

================================================================================
MSG: raptor_dbw_msgs/LowBeam
uint8 status

uint8 OFF = 0
uint8 RESERVED = 1
uint8 ON = 2
uint8 RESERVED_1 = 3
"""
  __slots__ = ['header','turn_signal_state','right_rear_door_state','high_beam_state','front_wiper_state','rear_wiper_state','ignition_state','left_rear_door_state','liftgate_door_state','horn_state','low_beam_state','rolling_counter']
  _slot_types = ['std_msgs/Header','raptor_dbw_msgs/TurnSignal','raptor_dbw_msgs/DoorState','raptor_dbw_msgs/HighBeamState','raptor_dbw_msgs/WiperFront','raptor_dbw_msgs/WiperRear','raptor_dbw_msgs/Ignition','raptor_dbw_msgs/DoorState','raptor_dbw_msgs/DoorState','raptor_dbw_msgs/HornState','raptor_dbw_msgs/LowBeam','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,turn_signal_state,right_rear_door_state,high_beam_state,front_wiper_state,rear_wiper_state,ignition_state,left_rear_door_state,liftgate_door_state,horn_state,low_beam_state,rolling_counter

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OtherActuatorsReport, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.turn_signal_state is None:
        self.turn_signal_state = raptor_dbw_msgs.msg.TurnSignal()
      if self.right_rear_door_state is None:
        self.right_rear_door_state = raptor_dbw_msgs.msg.DoorState()
      if self.high_beam_state is None:
        self.high_beam_state = raptor_dbw_msgs.msg.HighBeamState()
      if self.front_wiper_state is None:
        self.front_wiper_state = raptor_dbw_msgs.msg.WiperFront()
      if self.rear_wiper_state is None:
        self.rear_wiper_state = raptor_dbw_msgs.msg.WiperRear()
      if self.ignition_state is None:
        self.ignition_state = raptor_dbw_msgs.msg.Ignition()
      if self.left_rear_door_state is None:
        self.left_rear_door_state = raptor_dbw_msgs.msg.DoorState()
      if self.liftgate_door_state is None:
        self.liftgate_door_state = raptor_dbw_msgs.msg.DoorState()
      if self.horn_state is None:
        self.horn_state = raptor_dbw_msgs.msg.HornState()
      if self.low_beam_state is None:
        self.low_beam_state = raptor_dbw_msgs.msg.LowBeam()
      if self.rolling_counter is None:
        self.rolling_counter = 0
    else:
      self.header = std_msgs.msg.Header()
      self.turn_signal_state = raptor_dbw_msgs.msg.TurnSignal()
      self.right_rear_door_state = raptor_dbw_msgs.msg.DoorState()
      self.high_beam_state = raptor_dbw_msgs.msg.HighBeamState()
      self.front_wiper_state = raptor_dbw_msgs.msg.WiperFront()
      self.rear_wiper_state = raptor_dbw_msgs.msg.WiperRear()
      self.ignition_state = raptor_dbw_msgs.msg.Ignition()
      self.left_rear_door_state = raptor_dbw_msgs.msg.DoorState()
      self.liftgate_door_state = raptor_dbw_msgs.msg.DoorState()
      self.horn_state = raptor_dbw_msgs.msg.HornState()
      self.low_beam_state = raptor_dbw_msgs.msg.LowBeam()
      self.rolling_counter = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_11B().pack(_x.turn_signal_state.value, _x.right_rear_door_state.value, _x.high_beam_state.value, _x.front_wiper_state.status, _x.rear_wiper_state.status, _x.ignition_state.status, _x.left_rear_door_state.value, _x.liftgate_door_state.value, _x.horn_state.status, _x.low_beam_state.status, _x.rolling_counter))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.turn_signal_state is None:
        self.turn_signal_state = raptor_dbw_msgs.msg.TurnSignal()
      if self.right_rear_door_state is None:
        self.right_rear_door_state = raptor_dbw_msgs.msg.DoorState()
      if self.high_beam_state is None:
        self.high_beam_state = raptor_dbw_msgs.msg.HighBeamState()
      if self.front_wiper_state is None:
        self.front_wiper_state = raptor_dbw_msgs.msg.WiperFront()
      if self.rear_wiper_state is None:
        self.rear_wiper_state = raptor_dbw_msgs.msg.WiperRear()
      if self.ignition_state is None:
        self.ignition_state = raptor_dbw_msgs.msg.Ignition()
      if self.left_rear_door_state is None:
        self.left_rear_door_state = raptor_dbw_msgs.msg.DoorState()
      if self.liftgate_door_state is None:
        self.liftgate_door_state = raptor_dbw_msgs.msg.DoorState()
      if self.horn_state is None:
        self.horn_state = raptor_dbw_msgs.msg.HornState()
      if self.low_beam_state is None:
        self.low_beam_state = raptor_dbw_msgs.msg.LowBeam()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 11
      (_x.turn_signal_state.value, _x.right_rear_door_state.value, _x.high_beam_state.value, _x.front_wiper_state.status, _x.rear_wiper_state.status, _x.ignition_state.status, _x.left_rear_door_state.value, _x.liftgate_door_state.value, _x.horn_state.status, _x.low_beam_state.status, _x.rolling_counter,) = _get_struct_11B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_11B().pack(_x.turn_signal_state.value, _x.right_rear_door_state.value, _x.high_beam_state.value, _x.front_wiper_state.status, _x.rear_wiper_state.status, _x.ignition_state.status, _x.left_rear_door_state.value, _x.liftgate_door_state.value, _x.horn_state.status, _x.low_beam_state.status, _x.rolling_counter))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.turn_signal_state is None:
        self.turn_signal_state = raptor_dbw_msgs.msg.TurnSignal()
      if self.right_rear_door_state is None:
        self.right_rear_door_state = raptor_dbw_msgs.msg.DoorState()
      if self.high_beam_state is None:
        self.high_beam_state = raptor_dbw_msgs.msg.HighBeamState()
      if self.front_wiper_state is None:
        self.front_wiper_state = raptor_dbw_msgs.msg.WiperFront()
      if self.rear_wiper_state is None:
        self.rear_wiper_state = raptor_dbw_msgs.msg.WiperRear()
      if self.ignition_state is None:
        self.ignition_state = raptor_dbw_msgs.msg.Ignition()
      if self.left_rear_door_state is None:
        self.left_rear_door_state = raptor_dbw_msgs.msg.DoorState()
      if self.liftgate_door_state is None:
        self.liftgate_door_state = raptor_dbw_msgs.msg.DoorState()
      if self.horn_state is None:
        self.horn_state = raptor_dbw_msgs.msg.HornState()
      if self.low_beam_state is None:
        self.low_beam_state = raptor_dbw_msgs.msg.LowBeam()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 11
      (_x.turn_signal_state.value, _x.right_rear_door_state.value, _x.high_beam_state.value, _x.front_wiper_state.status, _x.rear_wiper_state.status, _x.ignition_state.status, _x.left_rear_door_state.value, _x.liftgate_door_state.value, _x.horn_state.status, _x.low_beam_state.status, _x.rolling_counter,) = _get_struct_11B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11B = None
def _get_struct_11B():
    global _struct_11B
    if _struct_11B is None:
        _struct_11B = struct.Struct("<11B")
    return _struct_11B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
