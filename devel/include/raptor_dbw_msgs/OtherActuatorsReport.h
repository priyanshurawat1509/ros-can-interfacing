// Generated by gencpp from file raptor_dbw_msgs/OtherActuatorsReport.msg
// DO NOT EDIT!


#ifndef RAPTOR_DBW_MSGS_MESSAGE_OTHERACTUATORSREPORT_H
#define RAPTOR_DBW_MSGS_MESSAGE_OTHERACTUATORSREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <raptor_dbw_msgs/TurnSignal.h>
#include <raptor_dbw_msgs/DoorState.h>
#include <raptor_dbw_msgs/HighBeamState.h>
#include <raptor_dbw_msgs/WiperFront.h>
#include <raptor_dbw_msgs/WiperRear.h>
#include <raptor_dbw_msgs/Ignition.h>
#include <raptor_dbw_msgs/DoorState.h>
#include <raptor_dbw_msgs/DoorState.h>
#include <raptor_dbw_msgs/HornState.h>
#include <raptor_dbw_msgs/LowBeam.h>

namespace raptor_dbw_msgs
{
template <class ContainerAllocator>
struct OtherActuatorsReport_
{
  typedef OtherActuatorsReport_<ContainerAllocator> Type;

  OtherActuatorsReport_()
    : header()
    , turn_signal_state()
    , right_rear_door_state()
    , high_beam_state()
    , front_wiper_state()
    , rear_wiper_state()
    , ignition_state()
    , left_rear_door_state()
    , liftgate_door_state()
    , horn_state()
    , low_beam_state()
    , rolling_counter(0)  {
    }
  OtherActuatorsReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , turn_signal_state(_alloc)
    , right_rear_door_state(_alloc)
    , high_beam_state(_alloc)
    , front_wiper_state(_alloc)
    , rear_wiper_state(_alloc)
    , ignition_state(_alloc)
    , left_rear_door_state(_alloc)
    , liftgate_door_state(_alloc)
    , horn_state(_alloc)
    , low_beam_state(_alloc)
    , rolling_counter(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator>  _turn_signal_state_type;
  _turn_signal_state_type turn_signal_state;

   typedef  ::raptor_dbw_msgs::DoorState_<ContainerAllocator>  _right_rear_door_state_type;
  _right_rear_door_state_type right_rear_door_state;

   typedef  ::raptor_dbw_msgs::HighBeamState_<ContainerAllocator>  _high_beam_state_type;
  _high_beam_state_type high_beam_state;

   typedef  ::raptor_dbw_msgs::WiperFront_<ContainerAllocator>  _front_wiper_state_type;
  _front_wiper_state_type front_wiper_state;

   typedef  ::raptor_dbw_msgs::WiperRear_<ContainerAllocator>  _rear_wiper_state_type;
  _rear_wiper_state_type rear_wiper_state;

   typedef  ::raptor_dbw_msgs::Ignition_<ContainerAllocator>  _ignition_state_type;
  _ignition_state_type ignition_state;

   typedef  ::raptor_dbw_msgs::DoorState_<ContainerAllocator>  _left_rear_door_state_type;
  _left_rear_door_state_type left_rear_door_state;

   typedef  ::raptor_dbw_msgs::DoorState_<ContainerAllocator>  _liftgate_door_state_type;
  _liftgate_door_state_type liftgate_door_state;

   typedef  ::raptor_dbw_msgs::HornState_<ContainerAllocator>  _horn_state_type;
  _horn_state_type horn_state;

   typedef  ::raptor_dbw_msgs::LowBeam_<ContainerAllocator>  _low_beam_state_type;
  _low_beam_state_type low_beam_state;

   typedef uint8_t _rolling_counter_type;
  _rolling_counter_type rolling_counter;





  typedef boost::shared_ptr< ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator> const> ConstPtr;

}; // struct OtherActuatorsReport_

typedef ::raptor_dbw_msgs::OtherActuatorsReport_<std::allocator<void> > OtherActuatorsReport;

typedef boost::shared_ptr< ::raptor_dbw_msgs::OtherActuatorsReport > OtherActuatorsReportPtr;
typedef boost::shared_ptr< ::raptor_dbw_msgs::OtherActuatorsReport const> OtherActuatorsReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.turn_signal_state == rhs.turn_signal_state &&
    lhs.right_rear_door_state == rhs.right_rear_door_state &&
    lhs.high_beam_state == rhs.high_beam_state &&
    lhs.front_wiper_state == rhs.front_wiper_state &&
    lhs.rear_wiper_state == rhs.rear_wiper_state &&
    lhs.ignition_state == rhs.ignition_state &&
    lhs.left_rear_door_state == rhs.left_rear_door_state &&
    lhs.liftgate_door_state == rhs.liftgate_door_state &&
    lhs.horn_state == rhs.horn_state &&
    lhs.low_beam_state == rhs.low_beam_state &&
    lhs.rolling_counter == rhs.rolling_counter;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator1> & lhs, const ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace raptor_dbw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2109072233b64ea71bab77b539413ada";
  }

  static const char* value(const ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2109072233b64ea7ULL;
  static const uint64_t static_value2 = 0x1bab77b539413adaULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raptor_dbw_msgs/OtherActuatorsReport";
  }

  static const char* value(const ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"TurnSignal turn_signal_state \n"
"DoorState right_rear_door_state \n"
"HighBeamState high_beam_state \n"
"WiperFront front_wiper_state \n"
"WiperRear rear_wiper_state \n"
"Ignition ignition_state \n"
"DoorState left_rear_door_state \n"
"DoorState liftgate_door_state \n"
"HornState horn_state \n"
"LowBeam low_beam_state \n"
"\n"
"uint8 rolling_counter\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: raptor_dbw_msgs/TurnSignal\n"
"uint8 value\n"
"\n"
"uint8 NONE = 0\n"
"uint8 LEFT = 1\n"
"uint8 RIGHT = 2\n"
"uint8 HAZARDS = 3\n"
"uint8 SNA = 7\n"
"================================================================================\n"
"MSG: raptor_dbw_msgs/DoorState\n"
"uint8 value\n"
"\n"
"uint8 UNDEFINED = 0\n"
"uint8 CLOSED = 1\n"
"uint8 OPEN = 2\n"
"uint8 SNA = 3\n"
"\n"
"================================================================================\n"
"MSG: raptor_dbw_msgs/HighBeamState\n"
"uint8 value\n"
"\n"
"uint8 SNA = 0\n"
"uint8 RESERVED = 1\n"
"uint8 ON = 2\n"
"uint8 OFF = 0\n"
"================================================================================\n"
"MSG: raptor_dbw_msgs/WiperFront\n"
"uint8 status\n"
"\n"
"uint8 OFF = 0\n"
"uint8 INTERVAL_1 = 1\n"
"uint8 INTERVAL_2 = 2\n"
"uint8 INTERVAL_3 = 3\n"
"uint8 INTERVAL_4 = 4\n"
"uint8 INTERVAL_5 = 5\n"
"uint8 INTERVAL_6 = 6\n"
"uint8 CONSTANT_LOW = 11\n"
"uint8 CONSTANT_HIGH = 12\n"
"uint8 WASH_BRIEF = 13\n"
"uint8 WASH_CONTINUOUS = 14\n"
"uint8 SNA = 15\n"
"================================================================================\n"
"MSG: raptor_dbw_msgs/WiperRear\n"
"uint8 status\n"
"\n"
"uint8 OFF = 0\n"
"uint8 INTERVAL_1 = 1\n"
"uint8 CONSTANT_LOW = 11\n"
"uint8 CONSTANT_HIGH = 12\n"
"uint8 WASH_BRIEF = 13\n"
"uint8 WASH_CONTINUOUS = 14\n"
"uint8 SNA = 15\n"
"================================================================================\n"
"MSG: raptor_dbw_msgs/Ignition\n"
"uint8 status\n"
"\n"
"uint8 NO_REQUEST = 0\n"
"uint8 FORCE_OFF = 1\n"
"uint8 ACCESSORY = 2\n"
"uint8 RUN = 3\n"
"uint8 CRANK = 4\n"
"================================================================================\n"
"MSG: raptor_dbw_msgs/HornState\n"
"uint8 status\n"
"\n"
"uint8 OFF = 0\n"
"uint8 ON = 1\n"
"uint8 SNA = 2\n"
"\n"
"================================================================================\n"
"MSG: raptor_dbw_msgs/LowBeam\n"
"uint8 status\n"
"\n"
"uint8 OFF = 0\n"
"uint8 RESERVED = 1\n"
"uint8 ON = 2\n"
"uint8 RESERVED_1 = 3\n"
;
  }

  static const char* value(const ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.turn_signal_state);
      stream.next(m.right_rear_door_state);
      stream.next(m.high_beam_state);
      stream.next(m.front_wiper_state);
      stream.next(m.rear_wiper_state);
      stream.next(m.ignition_state);
      stream.next(m.left_rear_door_state);
      stream.next(m.liftgate_door_state);
      stream.next(m.horn_state);
      stream.next(m.low_beam_state);
      stream.next(m.rolling_counter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OtherActuatorsReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raptor_dbw_msgs::OtherActuatorsReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "turn_signal_state: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::TurnSignal_<ContainerAllocator> >::stream(s, indent + "  ", v.turn_signal_state);
    s << indent << "right_rear_door_state: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::DoorState_<ContainerAllocator> >::stream(s, indent + "  ", v.right_rear_door_state);
    s << indent << "high_beam_state: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::HighBeamState_<ContainerAllocator> >::stream(s, indent + "  ", v.high_beam_state);
    s << indent << "front_wiper_state: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::WiperFront_<ContainerAllocator> >::stream(s, indent + "  ", v.front_wiper_state);
    s << indent << "rear_wiper_state: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::WiperRear_<ContainerAllocator> >::stream(s, indent + "  ", v.rear_wiper_state);
    s << indent << "ignition_state: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::Ignition_<ContainerAllocator> >::stream(s, indent + "  ", v.ignition_state);
    s << indent << "left_rear_door_state: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::DoorState_<ContainerAllocator> >::stream(s, indent + "  ", v.left_rear_door_state);
    s << indent << "liftgate_door_state: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::DoorState_<ContainerAllocator> >::stream(s, indent + "  ", v.liftgate_door_state);
    s << indent << "horn_state: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::HornState_<ContainerAllocator> >::stream(s, indent + "  ", v.horn_state);
    s << indent << "low_beam_state: ";
    s << std::endl;
    Printer< ::raptor_dbw_msgs::LowBeam_<ContainerAllocator> >::stream(s, indent + "  ", v.low_beam_state);
    s << indent << "rolling_counter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rolling_counter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAPTOR_DBW_MSGS_MESSAGE_OTHERACTUATORSREPORT_H
